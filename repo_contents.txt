===== .devcontainer/DOCKERFILE =====
# syntax=docker/dockerfile:1
FROM mcr.microsoft.com/devcontainers/python:3.12

# ‚îÄ optional: install Poetry system-wide exactly as before ‚îÄ
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python3 - && \
    ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry

# (the image already uses user "vscode" and sets PATH correctly)
===== .devcontainer/devcontainer.json =====
{
  "name": "Python 3.11 + Poetry",
  "build": {
    "dockerfile": "Dockerfile",
    "context": "."
  },
  "workspaceFolder": "/workspace",
  "workspaceMount": "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached",
  "settings": {
    // use the container‚Äôs Python automatically
===== .gitignore =====
# Byte-compiled / optimized / DLL files
__pycache__/
*.pyc

# Environment variables and secrets
.env
node_modules/
artifacts/
stats.db
# Python
===== .python-version =====
3.12.2
===== LICENSE =====
MIT License

Copyright (c) 2025 Reppo Labs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
===== README.md =====
# Reppo Solver Node üåü
                   

![Reppo Solver Node](https://img.shields.io/badge/Version-0.1.0-blue.svg) ![License](https://img.shields.io/badge/License-MIT-green.svg)

The **Reppo Solver Node** is a decentralized application designed to participate in the **Reppo.Exchange**, a blockchain-based data marketplace that facilitates the creation, validation, and exchange of high-quality datasets. The Solver Node listens for Requests for Data (RFDs), generates or sources the requested datasets, uploads them to IPFS, verifies NFT ownership for access control, and submits solutions to the Reppo Exchange smart contract.

This README provides an overview of the Reppo Solver Node, its architecture, setup instructions, and usage guidelines.

---
===== datasolver/__init__.py =====
"""Data solver package for generating datasets from RFDs."""

from .datasolver import DataSolver
from .config import DatasetConfig
from .types import ProviderType

__all__ = ['DataSolver', 'DatasetConfig', 'ProviderType'] ===== datasolver/config.py =====
"""Configuration management for the data solver."""

import os
from pathlib import Path
from dataclasses import dataclass
from dotenv import load_dotenv
from .types import ProviderType

# Load environment variables
load_dotenv()
===== datasolver/datasolver.py =====
"""Main data solver implementation."""

import os
import json
import logging
from typing import Dict, Any, Optional, List, Type
from pathlib import Path

from .types import ProviderType
from .config import DatasetConfig
===== datasolver/providers/huggingface.py =====
"""HuggingFace provider implementation for text generation."""

import os
import logging
from typing import Dict, Any, List
from .provider import DataProvider

try:
    from transformers import pipeline, AutoModelForCausalLM, AutoTokenizer
except ImportError:
===== datasolver/providers/mcp/_shim/__init__.py =====
"""
Minimal stub that satisfies `from mcp_sdk import MCPClient`
when the real SDK is not installed (e.g. during local tests).
"""

class MCPClient:                      # noqa: N801
    def __init__(self, *_, **__):
        pass

    # no-op register (router tests only need this)
===== datasolver/providers/mcp/client.py =====
import os
import logging
from typing import Dict, Any, Optional, List, Type

from .provider import MCPProvider
from .tools.tool import MCPTool

logger = logging.getLogger('MCPClient')

class MCPClient(MCPProvider):
===== datasolver/providers/mcp/provider.py =====
"""MCP provider implementation for the data solver."""

from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List
from ..provider import DataProvider
import os

class MCPProvider(DataProvider):
    """Base class for MCP-based data providers.
    
===== datasolver/providers/mcp/router.py =====
import logging
import time
from typing import Dict, Any, List, Optional
from .client import MCPClient
from .tools.tool import MCPTool

# Use a specific logger for the router
log = logging.getLogger("RFDRouter")
# To see these logs during pytest, run: poetry run pytest -o log_cli=true -o log_cli_level=INFO

===== datasolver/providers/mcp/tools/dynamodb.py =====
"""DynamoDB tool for MCP data generation."""

import boto3
from typing import Dict, Any, List, Optional
from .tool import MCPTool

class DynamoDBTool(MCPTool):
    """MCP tool for DynamoDB operations"""
    
    def __init__(self):
===== datasolver/providers/mcp/tools/reducer.py =====
# datasolver/providers/mcp/tools/reducer.py

"""ReduceAvgTool ‚Äì averages numeric columns over a list of records."""
from typing import Dict, Any, List
from .tool import MCPTool

class ReduceAvgTool(MCPTool):
    # -------- metadata -------- #
    name: str = "reduce_avg"
    description: str = "Averages (mean) every numeric field in `records`."
===== datasolver/providers/mcp/tools/text_generator.py =====
"""Text generation tool for MCP data generation."""

from typing import Dict, Any, List
from .tool import MCPTool

class TextGeneratorTool(MCPTool):
    """MCP tool for generating text data"""
    
    def __init__(self):
        super().__init__(
===== datasolver/providers/mcp/tools/tool.py =====
"""Base class for MCP tools that handle specific data operations."""

from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List
import json

class MCPTool(ABC):
    """Abstract base class for MCP tools.
    
    This class defines the interface that all MCP tools must implement.
===== datasolver/providers/mock.py =====
"""Mock provider implementation for testing."""

import random
import logging
from datetime import datetime
from typing import Dict, Any, List
from .provider import DataProvider

class MockProvider(DataProvider):
    """Mock data provider for testing and development.
===== datasolver/providers/provider.py =====
"""Abstract base class for data providers."""

import logging
from abc import ABC, abstractmethod
from typing import Dict, Any

class DataProvider(ABC):
    """Abstract base class defining the interface for data providers.
    
    All data providers (HuggingFace, MCP, etc.) must implement this interface
===== datasolver/types.py =====
"""Type definitions for the data solver package."""

from enum import Enum

class ProviderType(Enum):
    """Data provider types supported by the solver"""
    MOCK = "mock"                # Mock data generation for testing
    HUGGINGFACE = "huggingface"  # HuggingFace model-based generation
    MCP = "mcp"                  # MCP tool-based generation ===== ipfsUploader.py =====
import requests
import os
import json
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Get API credentials from environment variables
PINATA_API_KEY = os.environ.get("PINATA_API_KEY")
===== main.py =====
# main.py
"""Main entry point for the solver node."""

import click
import logging
from solverNode import SolverNode
from typing import Optional

# Configure logging
logging.basicConfig(
===== mcp_sdk/__init__.py =====
"""
Very small stub so `import mcp_sdk` works in unit-tests.

Only functionality the tests need is the ability to hold a
`_tools` registry when the client is instantiated.
"""
class MCPClient:                       # pylint: disable=too-few-public-methods
    def __init__(self, *_, **__):
        self._tools = {}
    def register_tool(self, tool):
===== mock_mcp_server.py =====
# mock_mcp_server.py
from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
from typing import List, Dict, Any
import httpx
import logging
import uvicorn

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("MockMCPServer")
===== nftAuthorizer.py =====
import os
import json
from typing import List, Optional
from web3 import Web3
from web3.exceptions import ContractLogicError, Web3Exception
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

===== onchain/README.md =====
# Sample Hardhat Project

This project demonstrates a basic Hardhat use case. It comes with a sample contract, a test for that contract, and a Hardhat Ignition module that deploys that contract.

Try running some of the following tasks:

```shell
npx hardhat help
npx hardhat test
REPORT_GAS=true npx hardhat test
===== onchain/cache/solidity-files-cache.json =====
{
  "_format": "hh-sol-cache-2",
  "files": {
    "/mnt/c/development/Axintera/solver-node/onchain/contracts/RewardGauge.sol": {
      "lastModificationDate": 1751570032351,
      "contentHash": "9354cd20520c476fbeb4716f8c61be1d",
      "sourceName": "contracts/RewardGauge.sol",
      "solcConfig": {
        "version": "0.8.28",
        "settings": {
===== onchain/contracts/RewardGauge.sol =====
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol";
import "./RewardToken.sol";

contract RewardGauge {
    using MessageHashUtils for bytes32;      // ‚Üê attaches .toEthSignedMessageHash()

===== onchain/contracts/RewardToken.sol =====
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract RewardToken is ERC20 {
    constructor() ERC20("Axintera Reward", "xREP") {}
    function mint(address to, uint256 amt) external { _mint(to, amt); }
}
===== onchain/hardhat.config.js =====
// hardhat.config.js

require("@nomicfoundation/hardhat-toolbox-viem");
require("@nomicfoundation/hardhat-ignition");
require("dotenv").config();

module.exports = {
  solidity: "0.8.28",
  networks: {
    flow: {
===== onchain/ignition/deployments/chain-545/build-info/ed053921f50992ad3296f8106dbe3c1e.json =====
{
  "id": "ed053921f50992ad3296f8106dbe3c1e",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`‚Äôs `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`‚Äôs approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`‚Äôs approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
===== onchain/ignition/deployments/chain-545/deployed_addresses.json =====
{
  "RewardGaugeModule#RewardGauge": "0xf6e6C656Da6F7A0B1F2AAd8AF87B6cC6f220BF6b"
}
===== onchain/ignition/deployments/chain-545/journal.jsonl =====

{"chainId":545,"type":"DEPLOYMENT_INITIALIZE"}
{"artifactId":"RewardGaugeModule#RewardGauge","constructorArgs":["0x5FbDB2315678afecb367f032d93F642f64180aa3"],"contractName":"RewardGauge","dependencies":[],"from":"0x25d40008ffc27d95d506224a246916d7e7ac0f36","futureId":"RewardGaugeModule#RewardGauge","futureType":"NAMED_ARTIFACT_CONTRACT_DEPLOYMENT","libraries":{},"strategy":"basic","strategyConfig":{},"type":"DEPLOYMENT_EXECUTION_STATE_INITIALIZE","value":{"_kind":"bigint","value":"0"}}
{"futureId":"RewardGaugeModule#RewardGauge","networkInteraction":{"data":"0x60a060405234801561001057600080fd5b50604051610be6380380610be6833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610ac861011e6000396000818161027601526103350152610ac86000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634b8624c41461005c578063785ffb371461007a578063e1de4c2a14610098578063eb60db67146100b4578063fc0c546a146100e4575b600080fd5b610064610102565b6040516100719190610686565b60405180910390f35b61008261010e565b60405161008f91906106be565b60405180910390f35b6100b260048036038101906100ad91906107aa565b610114565b005b6100ce60048036038101906100c9919061087c565b610312565b6040516100db91906106be565b60405180910390f35b6100ec610333565b6040516100f99190610908565b60405180910390f35b670de0b6b3a764000081565b61177081565b600061011f85610357565b905060006101718285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061038d565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff168561ffff16101561020a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020190610980565b60405180910390fd5b846000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555061177061ffff168561ffff161061030a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1982670de0b6b3a76400006040518363ffffffff1660e01b81526004016102d79291906109af565b600060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050505b505050505050565b60006020528060005260406000206000915054906101000a900461ffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b60008060008061039d86866103b9565b9250925092506103ad8282610415565b82935050505092915050565b600080600060418451036103fe5760008060006020870151925060408701519150606087015160001a90506103f088828585610579565b95509550955050505061040e565b60006002855160001b9250925092505b9250925092565b60006003811115610429576104286109d8565b5b82600381111561043c5761043b6109d8565b5b03156105755760016003811115610456576104556109d8565b5b826003811115610469576104686109d8565b5b036104a0576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156104b4576104b36109d8565b5b8260038111156104c7576104c66109d8565b5b0361050c578060001c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016105039190610686565b60405180910390fd5b60038081111561051f5761051e6109d8565b5b826003811115610532576105316109d8565b5b0361057457806040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260040161056b9190610a16565b60405180910390fd5b5b5050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c11156105b9576000600385925092509250610663565b6000600188888888604051600081526020016040526040516105de9493929190610a4d565b6020604051602081039080840390855afa158015610600573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361065457600060016000801b93509350935050610663565b8060008060001b935093509350505b9450945094915050565b6000819050919050565b6106808161066d565b82525050565b600060208201905061069b6000830184610677565b92915050565b600061ffff82169050919050565b6106b8816106a1565b82525050565b60006020820190506106d360008301846106af565b92915050565b600080fd5b600080fd5b6000819050919050565b6106f6816106e3565b811461070157600080fd5b50565b600081359050610713816106ed565b92915050565b610722816106a1565b811461072d57600080fd5b50565b60008135905061073f81610719565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261076a57610769610745565b5b8235905067ffffffffffffffff8111156107875761078661074a565b5b6020830191508360018202830111156107a3576107a261074f565b5b9250929050565b600080600080606085870312156107c4576107c36106d9565b5b60006107d287828801610704565b94505060206107e387828801610730565b935050604085013567ffffffffffffffff811115610804576108036106de565b5b61081087828801610754565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108498261081e565b9050919050565b6108598161083e565b811461086457600080fd5b50565b60008135905061087681610850565b92915050565b600060208284031215610892576108916106d9565b5b60006108a084828501610867565b91505092915050565b6000819050919050565b60006108ce6108c96108c48461081e565b6108a9565b61081e565b9050919050565b60006108e0826108b3565b9050919050565b60006108f2826108d5565b9050919050565b610902816108e7565b82525050565b600060208201905061091d60008301846108f9565b92915050565b600082825260208201905092915050565b7f73636f7265206e6f7420696d70726f7665640000000000000000000000000000600082015250565b600061096a601283610923565b915061097582610934565b602082019050919050565b600060208201905081810360008301526109998161095d565b9050919050565b6109a98161083e565b82525050565b60006040820190506109c460008301856109a0565b6109d16020830184610677565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610a10816106e3565b82525050565b6000602082019050610a2b6000830184610a07565b92915050565b600060ff82169050919050565b610a4781610a31565b82525050565b6000608082019050610a626000830187610a07565b610a6f6020830186610a3e565b610a7c6040830185610a07565b610a896060830184610a07565b9594505050505056fea2646970667358221220923cca873607314a3481bf536eae59c49a30dd521b85afa62b9fd25b0572e25664736f6c634300081c00330000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3","id":1,"type":"ONCHAIN_INTERACTION","value":{"_kind":"bigint","value":"0"}},"type":"NETWORK_INTERACTION_REQUEST"}
{"futureId":"RewardGaugeModule#RewardGauge","networkInteractionId":1,"nonce":45,"type":"TRANSACTION_PREPARE_SEND"}
{"futureId":"RewardGaugeModule#RewardGauge","networkInteractionId":1,"nonce":45,"transaction":{"fees":{"maxFeePerGas":{"_kind":"bigint","value":"100000002"},"maxPriorityFeePerGas":{"_kind":"bigint","value":"100000000"}},"hash":"0x289642d67cca9282900474abeec2c5892dbc1647d1cd7798fd4b8a6c5af0e049"},"type":"TRANSACTION_SEND"}
{"futureId":"RewardGaugeModule#RewardGauge","hash":"0x289642d67cca9282900474abeec2c5892dbc1647d1cd7798fd4b8a6c5af0e049","networkInteractionId":1,"receipt":{"blockHash":"0x2f7ee21f425cd167b867157c8b745a83f940efaf82c3c501a21afd1e541d52a0","blockNumber":55997175,"contractAddress":"0xf6e6C656Da6F7A0B1F2AAd8AF87B6cC6f220BF6b","logs":[],"status":"SUCCESS"},"type":"TRANSACTION_CONFIRM"}
{"futureId":"RewardGaugeModule#RewardGauge","result":{"address":"0xf6e6C656Da6F7A0B1F2AAd8AF87B6cC6f220BF6b","type":"SUCCESS"},"type":"DEPLOYMENT_EXECUTION_STATE_COMPLETE"}===== onchain/ignition/modules/RewardGaugeModule.js =====
// ignition/RewardGaugeModule.js

const { buildModule } = require("@nomicfoundation/hardhat-ignition/modules");

// you can parameterize things via CLI:
//   npx hardhat ignition --network flowTestnet --param rewardToken=0xABC...
module.exports = buildModule("RewardGaugeModule", (m) => {
  // fetch a constructor param or fall back to this default
  const rewardToken = m.getParameter(
    "rewardToken",
===== onchain/package-lock.json =====
{
  "name": "onchain",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "onchain",
      "version": "1.0.0",
      "license": "ISC",
===== onchain/package.json =====
{
  "name": "onchain",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
===== onchain/test/gauge.js =====
// onchain/test/gauge.js
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("RewardGauge ‚Äì debug run", function () {
  it("stores the new score and mints 1 xREP", async function () {
    const [provider] = await ethers.getSigners();
    console.log("Provider :", provider.address);

    /* deploy token */
===== pipeline.py =====
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Dict, Any, Optional, List
import logging
from enum import Enum
import random
import time
from datetime import datetime
import os
from dotenv import load_dotenv
===== poetry.lock =====
# This file is automatically @generated by Poetry 2.1.3 and should not be changed by hand.

[[package]]
name = "aiohappyeyeballs"
version = "2.6.1"
description = "Happy Eyeballs for asyncio"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
===== pyproject.toml =====
[project]
name = "axintera"
version = "0.1.0"
description = "Axintera ‚Äì Reppo solver with reputation layer"
authors = [
    {name = "Martel Axe",email = "you@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = "^3.12"
===== repo_contents.txt =====
===== .devcontainer/DOCKERFILE =====
# syntax=docker/dockerfile:1
FROM mcr.microsoft.com/devcontainers/python:3.12

# ‚îÄ optional: install Poetry system-wide exactly as before ‚îÄ
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python3 - && \
    ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry

# (the image already uses user "vscode" and sets PATH correctly)
===== .devcontainer/devcontainer.json =====
===== reputation.py =====
"""
reputation.py ‚Äì Axintera lightweight telemetry
Creates/updates   state/stats.db

Table:
  provider_id TEXT PK
  served      INT
  success     INT
  score       REAL   (Wilson lower-bound, 0-1)
"""
===== requirements.txt =====
# Web3 and Ethereum interaction
web3>=6.10.0
eth-account>=0.9.0
eth-typing>=3.4.0
eth-utils>=2.2.0

# HTTP requests for APIs
requests>=2.31.0

# Environment variable management
===== rfdListener.py =====
import os
import json
from web3 import Web3
from dotenv import load_dotenv
import time
from typing import Dict, Optional

# Load environment variables
load_dotenv()

===== sample_rfd.json =====
{
  "rfd_id": "test_rfd_001",
  "name": "Test RFD for Mock Data Generation",
  "description": "A test RFD for verifying mock data generation capabilities",
  "schema": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer",
        "description": "Unique identifier for each record"
===== sample_rfd2.json =====
{
    "rfd_id": "sf_weather_may_aug_001",
    "name": "Synthetic Weather Data for San Francisco (May to August)",
    "description": "A synthetic dataset containing daily weather information for San Francisco from May to August, including temperature, humidity, and precipitation.",
    "schema": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date"
===== score_service.py =====
from fastapi import FastAPI, HTTPException
import reputation, sqlite3, os

app = FastAPI(title="Axintera Score API")

@app.on_event("startup")
async def boot():
    reputation.init_db()

@app.get("/score/{provider_id}")
===== solverNode.py =====
# solverNode.py
"""
Main orchestration script for the Reppo solver node.

This script runs the solver as a persistent API server. On startup, it
registers itself with the Mock MCP Server (defined in the .env file).
It then listens for incoming RFD execution requests on the /execute_rfd endpoint.
"""
import os
import json
===== submitSolution.py =====
#!/usr/bin/env python
import os, json, logging
from typing import Optional

from dotenv import load_dotenv
from web3 import Web3
from ipfsUploader import upload_to_ipfs
import reputation                        # ‚Üê new helper

load_dotenv()
===== tests/_stubs/mcp_sdk/__init__.py =====
"""Ultra-minimal stub so `import mcp_sdk` succeeds in unit-tests."""
class MCPClient:                       # pylint: disable=too-few-public-methods
    def __init__(self, *_, **__):
        self._tools = {}
    def register_tool(self, tool):
        self._tools[tool.name] = tool
===== tests/conftest.py =====
import sys, pathlib
ROOT = pathlib.Path(__file__).resolve().parent.parent
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))
===== tests/test_client.py =====
# test_client.py
import requests
import json

# The RFD we want to fulfill. It uses the "reduce_avg" service that our solver provides.
rfd = {
    "service": "reduce_avg",
    "records": [
        {"x": 10, "y": 20, "z": 5},
        {"x": 2,  "y": 10, "z": 15}
===== tests/test_ipfs_uploader.py =====
import pytest
import requests
import json
from unittest.mock import MagicMock
from ipfsUploader import upload_to_ipfs

def test_upload_success(mocker):
    """
    Why: Verifies the happy path for IPFS uploads.
    How: Mocks requests.post to simulate a successful API response from Pinata.
===== tests/test_nft_authorizer.py =====
# tests/test_nft_authorizer.py
import pytest
from unittest.mock import MagicMock
from nftAuthorizer import NFTAuthorizer

@pytest.fixture
def mock_web3(mocker):
    # This fixture creates a complex mock for the web3 library
    mock_w3_instance = MagicMock()
    mock_w3_instance.is_connected.return_value = True
===== tests/test_reducer.py =====
from datasolver.providers.mcp.tools.reducer import ReduceAvgTool

def test_avg():
    tool = ReduceAvgTool()
    rfd = {"service":"reduce_avg",
           "records":[{"x":1,"y":2},{"x":3,"y":4}]}
    assert tool.generate(rfd) == [{"x":2,"y":3}]
===== tests/test_router.py =====
import pytest
from datasolver.providers.mcp.router import RFDRouter
from datasolver.providers.mcp.client import MCPClient
from datasolver.providers.mcp.tools.tool import MCPTool

# Fully implement the abstract methods from MCPTool
class EchoTool(MCPTool):
    @property
    def name(self) -> str:
        return "echo"
===== tests/test_router_logic.py =====
# tests/test_router_logic.py
import pytest
from datasolver.providers.mcp.router import RFDRouter
from datasolver.providers.mcp.client import MCPClient
from datasolver.providers.mcp.tools.tool import MCPTool

# --- Setup Dummy Tools for Testing ---
# FIX: Give each tool a unique name to avoid dictionary key collision
class CheapTool(MCPTool):
    @property
===== tests/test_score_service.py =====
===== tests/test_scoring.py =====
from reputation import wilson

def test_wilson_values():
    # empty denominator guard
    assert wilson(0, 0) == 0.0
    # 10/10 at 95 % CI ‚âà 0.722
    assert 0.70 < wilson(10, 10) < 0.75
    # 7/10 comes out ‚âà 0.397
    assert 0.35 < wilson(7, 10) < 0.45
===== tests/test_update_stats.py =====
# tests/test_update_stats.py
"""
Unit-test for Axintera reputation counters.

‚Ä¢ Uses a disposable SQLite file in the OS temp directory
  so it never touches your real state/stats.db.
‚Ä¢ Verifies that `served` increments every call
  and `success` increments only when ok=True.
‚Ä¢ Confirms the score column is created and defaults to 0.0.
"""
