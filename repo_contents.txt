===== repo_contents.txt =====
===== repo_contents.txt =====
===== .devcontainer/DOCKERFILE =====
# Use the official Microsoft Python image as a base
FROM mcr.microsoft.com/devcontainers/python:3.11

# Install Poetry via the official installer
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python3 - \
 && ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry

# (Optional) Pre-create your project folder
WORKDIR /workspace

# Ensure Poetry‚Äôs virtualenvs live inside the project (so you don‚Äôt hunt for them)
RUN poetry config virtualenvs.in-project true
===== .devcontainer/devcontainer.json =====
{
  "name": "Python 3.11 + Poetry",
  "build": {
    "dockerfile": "Dockerfile",
    "context": "."
  },
  "workspaceFolder": "/workspace",
  "workspaceMount": "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached",
  "settings": {
    // use the container‚Äôs Python automatically
    "python.defaultInterpreterPath": "/usr/local/bin/python"
  },
  "extensions": [
    "ms-python.python"
  ],
  "remoteUser": "vscode"
}
===== .gitignore =====
# Byte-compiled / optimized / DLL files
__pycache__/
*.pyc

# Environment variables and secrets
.env
node_modules/
artifacts/
stats.db
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
ENV/
env/
.env/

# IDE
.idea/
.vscode/
*.swp
*.swo
.DS_Store

# Project specific
data/
*.log
.coverage
htmlcov/
.pytest_cache/
===== .python-version =====
3.12.2
===== LICENSE =====
MIT License

Copyright (c) 2025 Reppo Labs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
===== README.md =====
# Reppo Solver Node üåü
                   

![Reppo Solver Node](https://img.shields.io/badge/Version-0.1.0-blue.svg) ![License](https://img.shields.io/badge/License-MIT-green.svg)

The **Reppo Solver Node** is a decentralized application designed to participate in the **Reppo.Exchange**, a blockchain-based data marketplace that facilitates the creation, validation, and exchange of high-quality datasets. The Solver Node listens for Requests for Data (RFDs), generates or sources the requested datasets, uploads them to IPFS, verifies NFT ownership for access control, and submits solutions to the Reppo Exchange smart contract.

This README provides an overview of the Reppo Solver Node, its architecture, setup instructions, and usage guidelines.

---

## Table of Contents üìã

- [Overview](#overview)
- [Architecture](#architecture)
  - [Components](#components)
  - [Workflow](#workflow)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Configuration](#configuration)
- [Usage](#usage)
  - [Running in Test Mode](#running-in-test-mode)
  - [Running in Production Mode](#running-in-production-mode)
- [Example RFD](#example-rfd)
- [Dependencies](#dependencies)
- [Contributing](#contributing)
- [License](#license)

---

## Overview ‚ú®

Reppo.Exchange enables:
- **Intent-Based Data Access**: AI agents broadcast Requests for Data (RFDs) that solver nodes fulfill
- **Decentralized MCP Network**: Distributed network of solver nodes providing MCP-compliant data services
- **Permissionless Participation**: Join the network by staking a Reppo Solver NFT
- **Token Incentives**: Earn $REPPO tokens for fulfilling RFDs
- **Standardized Integration**: MCP protocol ensures consistent data access across the network

The Solver Node performs these key functions:
1. **RFD Processing**: Listens for and processes Requests for Data on the blockchain
2. **MCP Integration**: Connects to MCP servers to fulfill data requests
3. **Data Generation/Querying**: Uses MCP tools (like DynamoDB) to generate or query data
4. **NFT Verification**: Ensures node operator owns a Reppo Solver NFT
5. **Solution Submission**: Submits verified solutions to the Reppo Exchange

The Reppo Solver Node is a key participant in this ecosystem, performing the following tasks:

1. **Listening for RFDs**: Monitors the Reppo Exchange smart contract for new RFD events.
2. **Generating Datasets**: Uses a data generation service (e.g., Two Ligma server) to create synthetic or real datasets that meet RFD specifications.
3. **Uploading to IPFS**: Stores datasets on IPFS via Pinata for decentralized, persistent storage.
4. **Verifying NFT Ownership**: Ensures the node operator owns a Reppo Node NFT, which is required to participate in the network.
5. **Submitting Solutions**: Submits the IPFS URI of the dataset to the Reppo Exchange smart contract for validation and reward distribution.

The Solver Node is designed to be modular, extensible, and easy to integrate with various data sources, such as Vana (Data DAOs), self-hosted LLMs, OpenGradient (synthetic data), or enterprise datasets.

---

## Architecture üèóÔ∏è

The Reppo Solver Node is built as a Python application with a modular architecture, separating concerns into distinct components. This design ensures maintainability, scalability, and flexibility for integrating with different data sources and blockchain networks.
The Solver Node implements a modular architecture designed for the decentralized MCP network:

### Components

The Solver Node consists of the following key components, each implemented in a dedicated Python module:

1. **RFDListener (`rfdListener.py`)**
   - **Purpose**: Listens for `RFDPosted` events on the Reppo Exchange
   - **Functionality**: 
     - Monitors blockchain for new RFDs
     - Parses RFD intents (data requirements)
     - Routes to appropriate solver components
   - **Dependencies**: `web3.py`, `python-dotenv`

2. **DataSolver (`datasolver/`)**
   - **Purpose**: MCP-compliant data generation and querying
   - **Functionality**: 
     - **MCP Provider**: Primary provider for production
       - DynamoDB Tool: Query and generate data from DynamoDB
       - Extensible for additional MCP tools
     - **HuggingFace Provider**: For AI-powered generation
     - **Mock Provider**: For testing and development
   - **Dependencies**: `mcp-sdk`, `requests`, `python-dotenv`

3. **IPFSUploader (`ipfsUploader.py`)**
   - **Purpose**: Uploads datasets to IPFS for decentralized storage.
   - **Functionality**: Uses the Pinata API to pin files to IPFS, returning an `ipfs://<CID>` URI. Handles file uploads securely with API key authentication.
   - **Dependencies**: `requests`, `python-dotenv`.

4. **NFTAuthorizer (`nftAuthorizer.py`)**
   - **Purpose**: Verifies that the node operator's wallet owns a Reppo Node NFT, which is required to submit solutions.
   - **Functionality**: Queries an ERC-721 NFT contract using `web3.py` to check the `balanceOf` the wallet address. Supports block-specific queries for historical ownership verification.
   - **Dependencies**: `web3.py`, `python-dotenv`.

5. **SolutionSubmitter (`submitSolution.py`)**
   - **Purpose**: Submits the dataset's IPFS URI to the Reppo Exchange smart contract.
   - **Functionality**: Builds, signs, and sends a transaction to the `submitSolution` function of the smart contract, including the RFD ID and IPFS URI. Returns the transaction hash upon success.
   - **Dependencies**: `web3.py`, `python-dotenv`.

===== datasolver/__init__.py =====
"""Data solver package for generating datasets from RFDs."""

from .datasolver import DataSolver
from .config import DatasetConfig
from .types import ProviderType

__all__ = ['DataSolver', 'DatasetConfig', 'ProviderType'] ===== datasolver/config.py =====
"""Configuration management for the data solver."""

import os
from pathlib import Path
from dataclasses import dataclass
from dotenv import load_dotenv
from .types import ProviderType

# Load environment variables
load_dotenv()

@dataclass
class DatasetConfig:
    """Dataset generation configuration"""
    provider_type: ProviderType
    output_dir: str = "data"
    
    def __post_init__(self):
        """Ensure output directory exists"""
        os.makedirs(self.output_dir, exist_ok=True) ===== datasolver/datasolver.py =====
"""Main data solver implementation."""

import os
import json
import logging
from typing import Dict, Any, Optional, List, Type
from pathlib import Path

from .types import ProviderType
from .config import DatasetConfig
from .providers.provider import DataProvider
from .providers.mcp.tools.tool import MCPTool
from .providers.huggingface import HuggingFaceProvider
from .providers.mcp.client import MCPClient
from .providers.mock import MockProvider

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('DataSolver')

class DataSolver:
    """Data solver for generating datasets"""
    
    @classmethod
    def from_env(cls, config_file: str = "config.json", mock_mode: bool = False) -> "DataSolver":
        """Factory method to instantiate a DataSolver from environment variables and a JSON config file.
        
        Reads a JSON config file (if it exists) and then overrides with environment variables (for secrets and overrides).
        Environment variables take precedence.
        
        Args:
            config_file (str): Path to the JSON config file (default: "config.json")
            mock_mode (bool): Whether to run in mock mode (default: False)
        Returns:
            DataSolver: A fully configured DataSolver instance.
        """
        if mock_mode:
            return cls(provider_type=ProviderType.MOCK)
            
        config: Dict[str, Any] = {}
        if os.path.isfile(config_file):
            with open(config_file, "r") as f:
                config = json.load(f)
        else:
            logger.warning(f"Config file {config_file} not found; using defaults and environment variables.")
        
        # Override config with environment variables (for secrets and overrides)
        provider_type_env = os.getenv("PROVIDER_TYPE")
        if provider_type_env:
            config["provider_type"] = provider_type_env
        mcp_tools_env = os.getenv("MCP_TOOLS")
        if mcp_tools_env:
            # Assume MCP_TOOLS is a comma-separated list of fully qualified class names (e.g. "datasolver.providers.mcp.tools.dynamodb.DynamoDBTool")
            mcp_tool_names = mcp_tools_env.split(",")
            mcp_tools = []
            for tool_name in mcp_tool_names:
                try:
                    mod_name, cls_name = tool_name.rsplit(".", 1)
                    mod = __import__(mod_name, fromlist=[cls_name])
                    mcp_tools.append(getattr(mod, cls_name))
                except (ImportError, AttributeError) as e:
                    logger.warning(f"Could not import MCP tool {tool_name} (error: {e}). Skipping.")
            config["mcp_tools"] = mcp_tools
        # (Add other env overrides as needed, e.g. HUGGINGFACE_TOKEN, etc.)
        
        provider_type_str = config.get("provider_type", "huggingface")
        try:
            provider_type = ProviderType(provider_type_str)
        except ValueError as e:
            logger.warning(f"Invalid provider type {provider_type_str} (error: {e}). Defaulting to HUGGINGFACE.")
            provider_type = ProviderType.HUGGINGFACE
        mcp_tools = config.get("mcp_tools", [])
        return cls(provider_type=provider_type, mcp_tools=mcp_tools)

    def __init__(self, provider_type: ProviderType = ProviderType.HUGGINGFACE, mcp_tools: Optional[List[Type]] = None):
        """Initialize solver with provider type
        
        Args:
            provider_type: Type of provider to use
            mcp_tools: List of MCP tool classes to use (only for MCP provider)
        """
        if provider_type == ProviderType.MOCK:
            self.provider = MockProvider()
        elif provider_type == ProviderType.HUGGINGFACE:
            from .providers.huggingface import HuggingFaceProvider
            self.provider = HuggingFaceProvider()
        elif provider_type == ProviderType.MCP:
            from .providers.mcp.client import MCPClient
            self.provider = MCPClient(tools=mcp_tools)
        else:
            raise ValueError(f"Unknown provider type: {provider_type}")
        logger.info(f"Initialized DataSolver with provider: {provider_type.value}")
    
    def solve(self, rfd: Dict) -> Optional[str]:
        """Generate dataset for RFD
        
        Args:
            rfd: Request for data
            
        Returns:
            Path to generated dataset file
===== datasolver/providers/huggingface.py =====
"""HuggingFace provider implementation for text generation."""

import os
import logging
from typing import Dict, Any, List
from .provider import DataProvider

try:
    from transformers import pipeline, AutoModelForCausalLM, AutoTokenizer
except ImportError:
    logging.warning("HuggingFace transformers not installed. Install with: pip install transformers")

class HuggingFaceProvider(DataProvider):
    """HuggingFace provider for text generation.
    
    This provider uses HuggingFace models to generate text data based on
    the RFD schema and requirements.
    """
    
    def __init__(self):
        super().__init__()
        self.token = os.getenv("HUGGINGFACE_TOKEN")
        self.model = os.getenv("HUGGINGFACE_MODEL", "gpt2")
        self._generator = None
        self._initialize_generator()
    
    def _initialize_generator(self):
        """Initialize the text generation pipeline."""
        try:
            if not self.token:
                self.logger.warning("HUGGINGFACE_TOKEN not set. Using model without authentication.")
            
            # Initialize model and tokenizer
            model = AutoModelForCausalLM.from_pretrained(
                self.model,
                token=self.token,
                trust_remote_code=True
            )
            tokenizer = AutoTokenizer.from_pretrained(
                self.model,
                token=self.token,
                trust_remote_code=True
            )
            
            # Create text generation pipeline
            self._generator = pipeline(
                "text-generation",
                model=model,
                tokenizer=tokenizer,
                device="cpu"  # Use CPU for testing
            )
            
            self.logger.info(f"Initialized HuggingFace provider with model: {self.model}")
            
        except Exception as e:
            self.logger.error(f"Failed to initialize HuggingFace provider: {e}")
            raise
    
    def generate_dataset(self, rfd: Dict) -> Dict[str, Any]:
        """Generate text dataset using HuggingFace model.
        
        Args:
            rfd: Request for data containing schema and requirements
            
        Returns:
            Generated text dataset
        """
        try:
            if not self._generator:
                raise RuntimeError("HuggingFace generator not initialized")
            
            schema = rfd.get("schema", {})
            properties = schema.get("properties", {})
            num_records = rfd.get("num_records", 3)
            
            records = []
            for _ in range(num_records):
                record = {}
                for field, field_schema in properties.items():
                    if field_schema.get("type") == "string":
                        # Generate text based on field description
                        prompt = field_schema.get("description", f"Generate {field}")
                        generated = self._generator(
                            prompt,
                            max_length=100,
                            num_return_sequences=1,
                            temperature=0.7
                        )
                        record[field] = generated[0]["generated_text"].strip()
                    else:
                        # For non-string fields, use default values
                        record[field] = self._get_default_value(field_schema)
                records.append(record)
            
            return {"data": records}
            
        except Exception as e:
            self.logger.error(f"Failed to generate dataset: {e}")
            raise
    
===== datasolver/providers/mcp/client.py =====
"""MCP client implementation for data generation."""

import os
import logging
from typing import Dict, Any, Optional, List, Type
from pathlib import Path

from .provider import MCPProvider
from .tools.tool import MCPTool

logger = logging.getLogger('MCPClient')

class MCPClient(MCPProvider):
    """MCP client for data generation"""
    
    def __init__(self, tools: Optional[List[Type[MCPTool]]] = None):
        """Initialize MCP client
        
        Args:
            tools: List of MCP tool classes to register (optional)
        """
        super().__init__()
        self._tools = {}
        self._initialize_client(tools or [])
    
    def _initialize_client(self, tool_classes: List[Type[MCPTool]]):
        """Initialize MCP client with tools
        
        Args:
            tool_classes: List of MCP tool classes to register
        """
        try:
            # Import MCP SDK
            from mcp_sdk import MCPClient as SDKClient
            
            # Get server configuration from environment
            server_url = os.getenv("MCP_SERVER_URL")
            if not server_url:
                raise ValueError("MCP_SERVER_URL must be set in .env file")
                
            # Optional server configuration
            server_config = {
                "timeout": int(os.getenv("MCP_SERVER_TIMEOUT", "30")),
                "retries": int(os.getenv("MCP_SERVER_RETRIES", "3")),
                "api_key": os.getenv("MCP_SERVER_API_KEY"),
                "verify_ssl": os.getenv("MCP_SERVER_VERIFY_SSL", "true").lower() == "true"
            }
            
            # Initialize SDK client
            self.client = SDKClient(server_url, **server_config)
            
            # Register tools
            for tool_class in tool_classes:
                tool = tool_class()
                self._tools[tool.name] = tool
                self.client.register_tool(tool)
                logger.info(f"Registered MCP tool: {tool.name}")
            
            if not self._tools:
                logger.warning("No MCP tools registered")
            
        except ImportError:
            logger.error("MCP SDK not installed. Install with: pip install mcp-sdk")
            raise
        except Exception as e:
            logger.error(f"Failed to initialize MCP client: {e}")
            raise
    
    def register_tool(self, tool: MCPTool):
        """Register a new MCP tool
        
        Args:
            tool: MCP tool instance to register
        """
        self._tools[tool.name] = tool
        self.client.register_tool(tool)
        logger.info(f"Registered MCP tool: {tool.name}")
    
    def get_tool(self, tool_name: str) -> Optional[MCPTool]:
        """Get tool by name
        
        Args:
            tool_name: Name of tool to get
            
        Returns:
            Tool instance if found
        """
        return self._tools.get(tool_name)
    
    def list_tools(self) -> List[str]:
        """List available tools
        
        Returns:
            List of tool names
        """
        return list(self._tools.keys())
    
    def generate_dataset(self, rfd: Dict) -> Dict[str, Any]:
        """Generate dataset using MCP tools
        
===== datasolver/providers/mcp/provider.py =====
"""MCP provider implementation for the data solver."""

from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List
from ..provider import DataProvider
import os

class MCPProvider(DataProvider):
    """Base class for MCP-based data providers.
    
    This class provides common functionality for MCP providers, including
    server configuration and tool management. Specific MCP implementations
    (like MCPClient) should extend this class.
    """
    
    def __init__(self):
        super().__init__()
        self.server_url = os.getenv("MCP_SERVER_URL", "http://localhost:8000")
        self.logger.info(f"Initialized MCP provider with server: {self.server_url}")
    
    @abstractmethod
    def get_tool(self, tool_name: str) -> Optional[Any]:
        """Get an MCP tool by name.
        
        Args:
            tool_name: Name of the tool to retrieve
            
        Returns:
            The tool instance if found, None otherwise
        """
        pass
    
    @abstractmethod
    def list_tools(self) -> List[str]:
        """List all available MCP tools.
        
        Returns:
            List of tool names that are currently registered
        """
        pass ===== datasolver/providers/mcp/tools/dynamodb.py =====
"""DynamoDB tool for MCP data generation."""

import boto3
from typing import Dict, Any, List, Optional
from .tool import MCPTool

class DynamoDBTool(MCPTool):
    """MCP tool for DynamoDB operations"""
    
    def __init__(self):
        super().__init__(
            name="dynamodb_tool",
            description="Query and generate DynamoDB data"
        )
        self.ddb = boto3.resource('dynamodb')
        self.client = boto3.client('dynamodb')
    
    def generate(self, rfd: Dict, **kwargs) -> List[Dict[str, Any]]:
        """Query or generate DynamoDB data based on RFD
        
        Args:
            rfd: The RFD containing query/generation requirements
            **kwargs: Additional arguments
            
        Returns:
            List of DynamoDB records
        """
        # Check if this is a query request
        if self._is_query_request(rfd):
            return self._query_table(rfd)
        else:
            return self._generate_data(rfd, **kwargs)
    
    def validate_rfd(self, rfd: Dict) -> bool:
        """Validate if this tool can handle the RFD
        
        Args:
            rfd: The RFD to validate
            
        Returns:
            True if the tool can handle the RFD
        """
        # For query requests
        if self._is_query_request(rfd):
            return self._validate_query_rfd(rfd)
        # For generation requests
        else:
            return self._validate_generation_rfd(rfd)
    
    def _is_query_request(self, rfd: Dict) -> bool:
        """Check if RFD is a query request
        
        Args:
            rfd: The RFD to check
            
        Returns:
            True if RFD is a query request
        """
        return "query" in rfd and "table_name" in rfd["query"]
    
    def _validate_query_rfd(self, rfd: Dict) -> bool:
        """Validate query RFD
        
        Args:
            rfd: The RFD to validate
            
        Returns:
            True if query RFD is valid
        """
        query = rfd.get("query", {})
        required = {"table_name", "key_condition"}
        return all(field in query for field in required)
    
    def _validate_generation_rfd(self, rfd: Dict) -> bool:
        """Validate generation RFD
        
        Args:
            rfd: The RFD to validate
            
        Returns:
            True if generation RFD is valid
        """
        schema = rfd.get("schema", {})
        properties = schema.get("properties", {})
        valid_types = {"string", "number", "binary", "boolean", "null", "list", "map"}
        return all(
            field_schema.get("type") in valid_types
            for field_schema in properties.values()
        )
    
    def _query_table(self, rfd: Dict) -> List[Dict[str, Any]]:
        """Query DynamoDB table based on RFD
        
        Args:
            rfd: The RFD containing query parameters
            
        Returns:
            List of matching records
        """
        query = rfd["query"]
===== datasolver/providers/mcp/tools/text_generator.py =====
"""Text generation tool for MCP data generation."""

from typing import Dict, Any, List
from .tool import MCPTool

class TextGeneratorTool(MCPTool):
    """MCP tool for generating text data"""
    
    def __init__(self):
        super().__init__(
            name="text_generator",
            description="Generates text data based on templates and patterns"
        )
    
    def generate(self, rfd: Dict, **kwargs) -> List[Dict[str, Any]]:
        """Generate text data based on RFD schema
        
        Args:
            rfd: The RFD containing schema and requirements
            **kwargs: Additional arguments including num_records
            
        Returns:
            List of generated text records
        """
        num_records = kwargs.get("num_records", 100)
        schema = rfd.get("schema", {})
        properties = schema.get("properties", {})
        
        records = []
        for _ in range(num_records):
            record = {}
            for field, field_schema in properties.items():
                if field_schema.get("type") == "string":
                    # Generate text based on field requirements
                    record[field] = self._generate_text(field_schema)
                else:
                    # For non-string fields, use default values
                    record[field] = self._get_default_value(field_schema)
            records.append(record)
        
        return records
    
    def validate_rfd(self, rfd: Dict) -> bool:
        """Validate if this tool can handle the RFD
        
        Args:
            rfd: The RFD to validate
            
        Returns:
            True if the tool can handle the RFD, False otherwise
        """
        schema = rfd.get("schema", {})
        properties = schema.get("properties", {})
        
        # Check if schema has any string fields
        return any(
            field_schema.get("type") == "string"
            for field_schema in properties.values()
        )
    
    def _get_capabilities(self) -> Dict[str, Any]:
        """Get the tool's capabilities
        
        Returns:
            Dict describing what the tool can do
        """
        return {
            "supported_types": ["string"],
            "features": [
                "template-based generation",
                "pattern matching",
                "context-aware generation"
            ],
            "constraints": {
                "max_length": 1000,
                "min_length": 1
            }
        }
    
    def _generate_text(self, field_schema: Dict[str, Any]) -> str:
        """Generate text for a field based on its schema
        
        Args:
            field_schema: The schema for the field
            
        Returns:
            Generated text value
        """
        # Implement text generation logic based on field schema
        # This could use templates, patterns, or other generation methods
        return f"Generated text for {field_schema.get('description', 'field')}"
    
    def _get_default_value(self, field_schema: Dict[str, Any]) -> Any:
        """Get a default value for a non-string field
        
        Args:
            field_schema: The schema for the field
            
        Returns:
            Default value based on field type
===== datasolver/providers/mcp/tools/tool.py =====
"""Base class for MCP tools that handle specific data operations."""

from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List
import json

class MCPTool(ABC):
    """Abstract base class for MCP tools.
    
    This class defines the interface that all MCP tools must implement.
    Tools are responsible for specific data operations like querying databases,
    generating synthetic data, or transforming data according to RFD requirements.
    
    Each tool must:
    1. Define its capabilities and requirements
    2. Validate incoming RFDs
    3. Generate or retrieve data according to the RFD
    4. Handle errors and edge cases
    """
    
    @property
    @abstractmethod
    def name(self) -> str:
        """Get the tool's unique identifier.
        
        Returns:
            A string identifier for the tool (e.g., 'dynamodb', 'synthetic')
        """
        pass
    
    @property
    @abstractmethod
    def description(self) -> str:
        """Get a human-readable description of the tool.
        
        Returns:
            A string describing what the tool does and its capabilities
        """
        pass
    
    @property
    @abstractmethod
    def capabilities(self) -> Dict[str, Any]:
        """Get the tool's capabilities and requirements.
        
        Returns:
            A dictionary describing what the tool can do and what it needs
            to function (e.g., required parameters, supported data types)
        """
        pass
    
    @abstractmethod
    def validate_rfd(self, rfd: Dict[str, Any]) -> bool:
        """Validate if the tool can handle the given RFD.
        
        Args:
            rfd: The request for data to validate
            
        Returns:
            True if the tool can handle this RFD, False otherwise
        """
        pass
    
    @abstractmethod
    def generate_data(self, rfd: Dict[str, Any]) -> Dict[str, Any]:
        """Generate or retrieve data according to the RFD.
        
        Args:
            rfd: The request for data specifying what to generate
            
        Returns:
            A dictionary containing the generated dataset
            
        Raises:
            ValueError: If the RFD is invalid or requirements can't be met
            RuntimeError: If data generation fails
        """
        pass ===== datasolver/providers/mock.py =====
"""Mock provider implementation for testing."""

import random
import logging
from datetime import datetime
from typing import Dict, Any, List
from .provider import DataProvider

class MockProvider(DataProvider):
    """Mock data provider for testing and development.
    
    This provider generates synthetic data based on the RFD schema,
    useful for testing and development without external dependencies.
    """
    
    def __init__(self):
        super().__init__()
        self.logger.info("Initialized mock provider")
    
    def generate_dataset(self, rfd: Dict) -> Dict[str, Any]:
        """Generate mock dataset based on RFD schema.
        
        Args:
            rfd: Request for data containing schema
            
        Returns:
            Generated mock dataset
        """
        try:
            schema = rfd.get("schema", {})
            properties = schema.get("properties", {})
            num_records = rfd.get("num_records", 10)
            
            records = []
            for i in range(num_records):
                record = {}
                for field, field_schema in properties.items():
                    record[field] = self._generate_mock_value(field_schema, i)
                records.append(record)
            
            return {"data": records}
            
        except Exception as e:
            self.logger.error(f"Failed to generate mock dataset: {e}")
            raise
    
    def _generate_mock_value(self, field_schema: Dict[str, Any], index: int) -> Any:
        """Generate a mock value based on field schema.
        
        Args:
            field_schema: The schema for the field
            index: Record index
            
        Returns:
            Generated mock value
        """
        field_type = field_schema.get("type")
        
        if field_type == "string":
            if "format" in field_schema:
                if "date" in field_schema["format"]:
                    return f"2024-{index % 12 + 1:02d}-{index % 28 + 1:02d}"
                elif "email" in field_schema["format"]:
                    return f"user_{index}@example.com"
                elif "uri" in field_schema["format"]:
                    return f"https://example.com/resource/{index}"
            return f"mock_value_{index}"
            
        elif field_type == "number":
            return float(random.randint(1, 1000)) / 10
            
        elif field_type == "integer":
            return random.randint(1, 100)
            
        elif field_type == "boolean":
            return random.choice([True, False])
            
        elif field_type == "array":
            item_schema = field_schema.get("items", {"type": "string"})
            return [self._generate_mock_value(item_schema, i) for i in range(3)]
            
        elif field_type == "object":
            properties = field_schema.get("properties", {})
            return {
                key: self._generate_mock_value(schema, index)
                for key, schema in properties.items()
            }
            
        return None ===== datasolver/providers/provider.py =====
"""Abstract base class for data providers."""

import logging
from abc import ABC, abstractmethod
from typing import Dict, Any

class DataProvider(ABC):
    """Abstract base class defining the interface for data providers.
    
    All data providers (HuggingFace, MCP, etc.) must implement this interface
    to ensure consistent dataset generation behavior.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
    
    @abstractmethod
    def generate_dataset(self, rfd: Dict) -> Dict[str, Any]:
        """Generate a dataset based on the RFD requirements.
        
        Args:
            rfd: Request for data containing schema and requirements
            
        Returns:
            Generated dataset as a dictionary
        """
        pass ===== datasolver/types.py =====
"""Type definitions for the data solver package."""

from enum import Enum

class ProviderType(Enum):
    """Data provider types supported by the solver"""
    MOCK = "mock"                # Mock data generation for testing
    HUGGINGFACE = "huggingface"  # HuggingFace model-based generation
    MCP = "mcp"                  # MCP tool-based generation ===== ipfsUploader.py =====
import requests
import os
import json
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Get API credentials from environment variables
PINATA_API_KEY = os.environ.get("PINATA_API_KEY")
PINATA_SECRET_API_KEY = os.environ.get("PINATA_SECRET_API_KEY")

def upload_to_ipfs(file_path: str) -> str:
    """Uploads a file to IPFS using Pinata
    
    Args:
        file_path: Path to the file to upload
        
    Returns:
        str: IPFS URI (e.g., "ipfs://<CID>")
        
    Raises:
        Exception: If upload fails or credentials are missing
    """
    # Verify API keys exist
    if not PINATA_API_KEY or not PINATA_SECRET_API_KEY:
        raise Exception("Pinata API keys are missing. Please set PINATA_API_KEY and PINATA_SECRET_API_KEY in your .env file.")
    
    # Pinata API endpoint for file uploads
    url = "https://api.pinata.cloud/pinning/pinFileToIPFS"
    
    # Set up headers with Pinata API keys
    headers = {
        "pinata_api_key": PINATA_API_KEY,
        "pinata_secret_api_key": PINATA_SECRET_API_KEY
    }
    
    # Set up optional Pinata metadata
    file_name = os.path.basename(file_path)
    pinata_metadata = json.dumps({
        "name": file_name
    })
    
    # Open and read the file
    try:
        with open(file_path, 'rb') as file:
            files = {
                'file': (file_name, file)
            }
            
            data = {
                'pinataMetadata': pinata_metadata
            }
            
            # Make the request
            response = requests.post(url, files=files, headers=headers, data=data)
            
            # Check response
            if response.status_code == 200:
                # Extract CID from response
                data = response.json()
                cid = data.get('IpfsHash')
                if not cid:
                    raise Exception("No IPFS hash returned in response")
                return f"ipfs://{cid}"
            else:
                # Handle error
                error_message = response.text
                try:
                    error_data = response.json()
                    error_message = json.dumps(error_data)
                except json.JSONDecodeError:
                    pass
                raise Exception(f"Failed to upload to IPFS: {response.status_code} - {error_message}")
                
    except FileNotFoundError:
        raise Exception(f"File not found at path: {file_path}")
    except Exception as e:
        raise Exception(f"Unexpected error during IPFS upload: {str(e)}")

if __name__ == "__main__":
    file_path = "./data/solution.json"
    print("Current working directory:", os.getcwd())
    try:
        ipfs_uri = upload_to_ipfs(file_path)
        print("Uploaded to:", ipfs_uri)
    except Exception as e:
        print(f"Error: {e}")===== main.py =====
# main.py
"""Main entry point for the solver node."""

import click
import logging
from solverNode import SolverNode
from typing import Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('Main')

BANNER = """
  ____                          _   _           _      
 |  _ \\ ___ _ __  _ __   ___   | \\ | | ___   __| | ___ 
 | |_) / _ \\ '_ \\| '_ \\ / _ \\  |  \\| |/ _ \\ / _` |/ _ \\
 |  _ <  __/ |_) | |_) | (_) | | |\\  | (_) | (_| |  __/
 |_| \\_\\___| .__/| .__/ \\___/  |_| \\_|\\___/ \\__,_|\\___|
           |_|   |_|                                   
"""

@click.group()
def cli():
    """Solver Node CLI - A tool for processing Requests for Data (RFDs)"""
    pass

@cli.command()
@click.option('--test', is_flag=True, help='Test mode: Process a sample RFD file with real data generation')
@click.option('--mock', is_flag=True, help='Mock mode: Simulate the entire pipeline with mock data and services')
@click.option('--rfd-file', default='sample_rfd.json', help='Path to sample RFD JSON file (used in test mode)')
def start(test: bool, mock: bool, rfd_file: str):
    """Start the solver node
    
    Test mode (--test):
    - Processes a sample RFD file
    - Uses real data generation (HuggingFace if available)
    - Skips blockchain interactions
    - Good for testing data generation logic
    
    Mock mode (--mock):
    - Simulates the entire pipeline
    - Uses mock data generation
    - Uses mock blockchain responses
    - Good for development and debugging
    """
    print(BANNER)
    
    # Initialize solver node
    try:
        node = SolverNode(
            test_mode=test,
            mock_mode=mock
        )
    except Exception as e:
        logger.error(f"Failed to initialize solver node: {str(e)}")
        return
    
    # Run the node
    try:
        if test or mock:
            node._run_test_mode()
        else:
            node._run_production_mode()
    except KeyboardInterrupt:
        logger.info("Solver node stopped by user")
    except Exception as e:
        logger.error(f"Solver node failed: {str(e)}")

if __name__ == '__main__':
    cli()===== nftAuthorizer.py =====
import os
import json
from typing import List, Optional
from web3 import Web3
from web3.exceptions import ContractLogicError, Web3Exception
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class NFTAuthorizer:
    """
    Class to verify NFT ownership for wallet addresses with enhanced security
    """
    def __init__(self):
        # Configuration from environment variables
        self.rpc_url = os.environ.get("WEB3_RPC_URL")
        self.nft_contract_address = os.environ.get("NFT_CONTRACT_ADDRESS")
        self.nft_contract_abi_path = os.environ.get(
            "NFT_CONTRACT_ABI_PATH", 
            "./abis/nft_abi.json"
        )
        self.chain_id = int(os.environ.get("CHAIN_ID", "1"))  # Default to Ethereum mainnet
        
        # Validate required environment variables
        if not all([self.rpc_url, self.nft_contract_address]):
            raise ValueError("Missing required environment variables: WEB3_RPC_URL or NFT_CONTRACT_ADDRESS")

        # Initialize Web3 connection with timeout and retry
        self.web3 = Web3(Web3.HTTPProvider(
            self.rpc_url,
            request_kwargs={'timeout': 30}
        ))
        
        # Load and initialize contract
        self._initialize_contract()

    def _initialize_contract(self) -> None:
        """Initialize the NFT contract with error handling"""
        try:
            with open(self.nft_contract_abi_path, 'r') as abi_file:
                self.nft_contract_abi = json.load(abi_file)
            
            self.nft_contract = self.web3.eth.contract(
                address=self.web3.to_checksum_address(self.nft_contract_address),
                abi=self.nft_contract_abi
            )
        except FileNotFoundError:
            raise ValueError(f"NFT contract ABI not found at {self.nft_contract_abi_path}")
        except json.JSONDecodeError:
            raise ValueError(f"Invalid JSON in NFT contract ABI at {self.nft_contract_abi_path}")
        except Exception as e:
            raise ValueError(f"Failed to initialize NFT contract: {str(e)}")

    def is_connected(self) -> bool:
        """Check network connection with chain ID verification"""
        try:
            return self.web3.is_connected() and self.web3.eth.chain_id == self.chain_id
        except Exception:
            return False

    def has_nft(self, wallet_address: str, block_number: Optional[int] = None) -> bool:
        """
        Check if a wallet address owns at least one NFT at the specified block
        
        Args:
            wallet_address: The wallet address to check
            block_number: Optional specific block number to check (defaults to latest)
            
        Returns:
            bool: True if wallet owns NFT, False otherwise
        """
        if not self.web3.is_address(wallet_address):
            raise ValueError(f"Invalid wallet address: {wallet_address}")
            
        try:
            checksum_address = self.web3.to_checksum_address(wallet_address)
            call_params = {'block_identifier': block_number} if block_number else {}
            
            balance = self.nft_contract.functions.balanceOf(checksum_address).call(call_params)
            return balance > 0
            
        except ContractLogicError as e:
            print(f"Contract error checking NFT ownership: {str(e)}")
            return False
        except Web3Exception as e:
            print(f"Web3 error checking NFT ownership: {str(e)}")
            return False
        except Exception as e:
            print(f"Unexpected error checking NFT ownership: {str(e)}")
            return False

    def get_owned_token_ids(self, wallet_address: str, block_number: Optional[int] = None) -> List[int]:
        """
        Get all token IDs owned by a wallet address at the specified block
        
        Args:
            wallet_address: The wallet address to check
            block_number: Optional specific block number to check (defaults to latest)
            
===== onchain/README.md =====
# Sample Hardhat Project

This project demonstrates a basic Hardhat use case. It comes with a sample contract, a test for that contract, and a Hardhat Ignition module that deploys that contract.

Try running some of the following tasks:

```shell
npx hardhat help
npx hardhat test
REPORT_GAS=true npx hardhat test
npx hardhat node
npx hardhat ignition deploy ./ignition/modules/Lock.js
```
===== onchain/cache/solidity-files-cache.json =====
{
  "_format": "hh-sol-cache-2",
  "files": {
    "/mnt/c/development/Axintera/solver-node/onchain/contracts/RewardGauge.sol": {
      "lastModificationDate": 1751570032351,
      "contentHash": "9354cd20520c476fbeb4716f8c61be1d",
      "sourceName": "contracts/RewardGauge.sol",
      "solcConfig": {
        "version": "0.8.28",
        "settings": {
          "evmVersion": "paris",
          "optimizer": {
            "enabled": false,
            "runs": 200
          },
          "outputSelection": {
            "*": {
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ],
              "": [
                "ast"
              ]
            }
          }
        }
      },
      "imports": [
        "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
        "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
        "./RewardToken.sol"
      ],
      "versionPragmas": [
        "^0.8.26"
      ],
      "artifacts": [
        "RewardGauge"
      ]
    },
    "/mnt/c/development/Axintera/solver-node/onchain/contracts/RewardToken.sol": {
      "lastModificationDate": 1751569834101,
      "contentHash": "a5a3a73d8bdeb748994b8cb88540fb67",
      "sourceName": "contracts/RewardToken.sol",
      "solcConfig": {
        "version": "0.8.28",
        "settings": {
          "evmVersion": "paris",
          "optimizer": {
            "enabled": false,
            "runs": 200
          },
          "outputSelection": {
            "*": {
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ],
              "": [
                "ast"
              ]
            }
          }
        }
      },
      "imports": [
        "@openzeppelin/contracts/token/ERC20/ERC20.sol"
      ],
      "versionPragmas": [
        "^0.8.26"
      ],
      "artifacts": [
        "RewardToken"
      ]
    },
    "/mnt/c/development/Axintera/solver-node/onchain/node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "lastModificationDate": 1751569772088,
      "contentHash": "81de029d56aa803972be03c5d277cb6c",
      "sourceName": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
      "solcConfig": {
        "version": "0.8.28",
        "settings": {
          "evmVersion": "paris",
          "optimizer": {
            "enabled": false,
            "runs": 200
          },
          "outputSelection": {
            "*": {
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
===== onchain/contracts/RewardGauge.sol =====
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol";
import "./RewardToken.sol";

contract RewardGauge {
    using MessageHashUtils for bytes32;      // ‚Üê attaches .toEthSignedMessageHash()

    RewardToken public immutable token;
    mapping(address => uint16) public lastScore;   // 0‚Äì10 000 (basis-points)

    uint16  public constant THRESHOLD = 6000;      // ‚â• 0.60 gets bonus
    uint256 public constant BONUS     = 1e18;      // 1 xREP

    constructor(address tokenAddr) { token = RewardToken(tokenAddr); }

    /// repHash = keccak256(abi.encodePacked(provider, scoreBps, epoch))
    function submitScore(
        bytes32 repHash,
        uint16  scoreBps,
        bytes   calldata sig
    ) external {
        // MessageHashUtils gives us the ‚ÄúEthereum signed message‚Äù prefix
        bytes32 digest   = repHash.toEthSignedMessageHash();
        address provider = ECDSA.recover(digest, sig);

        require(scoreBps >= lastScore[provider], "score not improved");
        lastScore[provider] = scoreBps;

        if (scoreBps >= THRESHOLD) {
            token.mint(provider, BONUS);
        }
    }
}
===== onchain/contracts/RewardToken.sol =====
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract RewardToken is ERC20 {
    constructor() ERC20("Axintera Reward", "xREP") {}
    function mint(address to, uint256 amt) external { _mint(to, amt); }
}
===== onchain/hardhat.config.js =====
// hardhat.config.js

require("@nomicfoundation/hardhat-toolbox-viem");
require("@nomicfoundation/hardhat-ignition");
require("dotenv").config();

module.exports = {
  solidity: "0.8.28",
  networks: {
    flow: {
      url: "https://mainnet.evm.nodes.onflow.org",
      accounts: [process.env.DEPLOY_WALLET_1],
    },
    flowTestnet: {
      url: "https://testnet.evm.nodes.onflow.org",
      accounts: [process.env.DEPLOY_WALLET_1],
    },
  },
  etherscan: {
    apiKey: {
      // Blockscout (FlowScan) doesn‚Äôt require a real key
      flow: "abc",
      flowTestnet: "abc",
    },
    customChains: [
      {
        network: "flow",
        chainId: 747,
        urls: {
          apiURL: "https://evm.flowscan.io/api",
          browserURL: "https://evm.flowscan.io/",
        },
      },
      {
        network: "flowTestnet",
        chainId: 545,
        urls: {
          apiURL: "https://evm-testnet.flowscan.io/api",
          browserURL: "https://evm-testnet.flowscan.io/",
        },
      },
    ],
  },
  // (optional) you can configure ignition here, but by default it
  // will pick up any modules in ./ignition/
  ignition: { },
};
===== onchain/ignition/deployments/chain-545/build-info/ed053921f50992ad3296f8106dbe3c1e.json =====
{
  "id": "ed053921f50992ad3296f8106dbe3c1e",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`‚Äôs `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`‚Äôs approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`‚Äôs approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n √∑ 2 + 1, and for v in (302): v ‚àà {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\n     */\n    function toDataWithIntendedValidatorHash(\n        address validator,\n        bytes32 messageHash\n    ) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, hex\"19_00\")\n            mstore(0x02, shl(96, validator))\n            mstore(0x16, messageHash)\n            digest := keccak256(0x00, 0x36)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2¬≤‚Åµ‚Å∂ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2¬≤‚Åµ‚Å∂ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2¬≤‚Åµ‚Å∂ and mod 2¬≤‚Åµ‚Å∂ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2¬≤‚Åµ‚Å∂ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2¬≤‚Åµ‚Å∂ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2¬≤‚Åµ‚Å∂ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2¬≤‚Åµ‚Å∂. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2¬≤‚Åµ‚Å∂ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2¬≤‚Åµ‚Å∂. Now that denominator is an odd number, it has an inverse modulo 2¬≤‚Åµ‚Å∂ such\n            // that denominator * inv ‚â° 1 mod 2¬≤‚Åµ‚Å∂. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ‚â° 1 mod 2‚Å¥.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2‚Å∏\n            inverse *= 2 - denominator * inverse; // inverse mod 2¬π‚Å∂\n            inverse *= 2 - denominator * inverse; // inverse mod 2¬≥¬≤\n            inverse *= 2 - denominator * inverse; // inverse mod 2‚Å∂‚Å¥\n            inverse *= 2 - denominator * inverse; // inverse mod 2¬π¬≤‚Å∏\n            inverse *= 2 - denominator * inverse; // inverse mod 2¬≤‚Åµ‚Å∂\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2¬≤‚Åµ‚Å∂. Since the preconditions guarantee that the outcome is\n            // less than 2¬≤‚Åµ‚Å∂, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ‚â° 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ‚â° 1 mod p`. As a consequence, we have `a * a**(p-2) ‚â° 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x¬≤ - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `Œµ_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ‚â§ sqrt(a) < 2**e`). We know that `e ‚â§ 128` because `(2¬π¬≤‚Å∏)¬≤ = 2¬≤‚Åµ‚Å∂` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ‚â§ sqrt(a) < 2**e ‚Üí (2**(e-1))¬≤ ‚â§ a < (2**e)¬≤ ‚Üí 2**(2*e-2) ‚â§ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ‚â§ sqrt(a) < 2**e = 2 * x_n`. This implies Œµ_n ‚â§ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to Œµ_n ‚â§ 2**(e-2).\n            // This is going to be our x_0 (and Œµ_0)\n            xn = (3 * xn) >> 1; // Œµ_0 := | x_0 - sqrt(a) | ‚â§ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}¬≤ - a = ((x_n + a / x_n) / 2)¬≤ - a\n            //              = ((x_n¬≤ + a) / (2 * x_n))¬≤ - a\n            //              = (x_n‚Å¥ + 2 * a * x_n¬≤ + a¬≤) / (4 * x_n¬≤) - a\n            //              = (x_n‚Å¥ + 2 * a * x_n¬≤ + a¬≤ - 4 * a * x_n¬≤) / (4 * x_n¬≤)\n            //              = (x_n‚Å¥ - 2 * a * x_n¬≤ + a¬≤) / (4 * x_n¬≤)\n            //              = (x_n¬≤ - a)¬≤ / (2 * x_n)¬≤\n            //              = ((x_n¬≤ - a) / (2 * x_n))¬≤\n            //              ‚â• 0\n            // Which proves that for all n ‚â• 1, sqrt(a) ‚â§ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // Œµ_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n¬≤ + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))¬≤ / (2 * x_n) |\n            //         = | Œµ_n¬≤ / (2 * x_n) |\n            //         = Œµ_n¬≤ / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // Œµ_1 = Œµ_0¬≤ / | (2 * x_0) |\n            //     ‚â§ (2**(e-2))¬≤ / (2 * (2**(e-1) + 2**(e-2)))\n            //     ‚â§ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ‚â§ 2**(e-3) / 3\n            //     ‚â§ 2**(e-3-log2(3))\n            //     ‚â§ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ‚â§ sqrt(a) ‚â§ x_n:\n            // Œµ_{n+1} = Œµ_n¬≤ / | (2 * x_n) |\n            //         ‚â§ (2**(e-k))¬≤ / (2 * 2**(e-1))\n            //         ‚â§ 2**(2*e-2*k) / 2**e\n            //         ‚â§ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // Œµ_1 := | x_1 - sqrt(a) | ‚â§ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // Œµ_2 := | x_2 - sqrt(a) | ‚â§ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // Œµ_3 := | x_3 - sqrt(a) | ‚â§ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // Œµ_4 := | x_4 - sqrt(a) | ‚â§ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // Œµ_5 := | x_5 - sqrt(a) | ‚â§ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // Œµ_6 := | x_6 - sqrt(a) | ‚â§ 2**(e-144)  -- general case with k = 72\n\n            // Because e ‚â§ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // Œµ_6 ‚â§ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Panic.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    using SafeCast for *;\n\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\n        (1 << 0x08) | // backspace\n            (1 << 0x09) | // tab\n            (1 << 0x0a) | // newline\n            (1 << 0x0c) | // form feed\n            (1 << 0x0d) | // carriage return\n            (1 << 0x22) | // double quote\n            (1 << 0x5c); // backslash\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev The string being parsed contains characters that are not in scope of the given base.\n     */\n    error StringsInvalidChar();\n\n    /**\n     * @dev The string being parsed is not a properly formatted address.\n     */\n    error StringsInvalidAddressFormat();\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input) internal pure returns (uint256) {\n        return parseUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[0-9]*`\n     * - The result must fit into an `uint256` type\n     */\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        uint256 result = 0;\n        for (uint256 i = begin; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 9) return (false, 0);\n            result *= 10;\n            result += chr;\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a decimal string and returns the value as a `int256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input) internal pure returns (int256) {\n        return parseInt(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `[-+]?[0-9]*`\n     * - The result must fit in an `int256` type.\n     */\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\n        (bool success, int256 value) = tryParseInt(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\n     * the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\n\n    /**\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\n     * character or if the result does not fit in a `int256`.\n     *\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\n     */\n    function tryParseInt(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, int256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseIntUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseIntUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, int256 value) {\n        bytes memory buffer = bytes(input);\n\n        // Check presence of a negative sign.\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        bool positiveSign = sign == bytes1(\"+\");\n        bool negativeSign = sign == bytes1(\"-\");\n        uint256 offset = (positiveSign || negativeSign).toUint();\n\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\n\n        if (absSuccess && absValue < ABS_MIN_INT256) {\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\n            return (true, type(int256).min);\n        } else return (false, 0);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as a `uint256`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input) internal pure returns (uint256) {\n        return parseHexUint(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\n     * - The result must fit in an `uint256` type.\n     */\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\n        if (!success) revert StringsInvalidChar();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\n     * invalid character.\n     *\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\n     */\n    function tryParseHexUint(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, uint256 value) {\n        if (end > bytes(input).length || begin > end) return (false, 0);\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\n    }\n\n    /**\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\n     */\n    function _tryParseHexUintUncheckedBounds(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bool success, uint256 value) {\n        bytes memory buffer = bytes(input);\n\n        // skip 0x prefix if present\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 offset = hasPrefix.toUint() * 2;\n\n        uint256 result = 0;\n        for (uint256 i = begin + offset; i < end; ++i) {\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\n            if (chr > 15) return (false, 0);\n            result *= 16;\n            unchecked {\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\n                result += chr;\n            }\n        }\n        return (true, result);\n    }\n\n    /**\n     * @dev Parse a hexadecimal string (with or without \"0x\" prefix), and returns the value as an `address`.\n     *\n     * Requirements:\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input) internal pure returns (address) {\n        return parseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\n     * `end` (excluded).\n     *\n     * Requirements:\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\n     */\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\n        (bool success, address value) = tryParseAddress(input, begin, end);\n        if (!success) revert StringsInvalidAddressFormat();\n        return value;\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\n     * formatted address. See {parseAddress-string} requirements.\n     */\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\n        return tryParseAddress(input, 0, bytes(input).length);\n    }\n\n    /**\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\n     */\n    function tryParseAddress(\n        string memory input,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (bool success, address value) {\n        if (end > bytes(input).length || begin > end) return (false, address(0));\n\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\"0x\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\n\n        // check that input is the correct length\n        if (end - begin == expectedLength) {\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\n            return (s, address(uint160(v)));\n        } else {\n            return (false, address(0));\n        }\n    }\n\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\n        uint8 value = uint8(chr);\n\n        // Try to parse `chr`:\n        // - Case 1: [0-9]\n        // - Case 2: [a-f]\n        // - Case 3: [A-F]\n        // - otherwise not supported\n        unchecked {\n            if (value > 47 && value < 58) value -= 48;\n            else if (value > 96 && value < 103) value -= 87;\n            else if (value > 64 && value < 71) value -= 55;\n            else return type(uint8).max;\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\n     *\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\n     *\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\n     * characters that are not in this range, but other tooling may provide different results.\n     */\n    function escapeJSON(string memory input) internal pure returns (string memory) {\n        bytes memory buffer = bytes(input);\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\n        uint256 outputLength = 0;\n\n        for (uint256 i; i < buffer.length; ++i) {\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\n                output[outputLength++] = \"\\\\\";\n                if (char == 0x08) output[outputLength++] = \"b\";\n                else if (char == 0x09) output[outputLength++] = \"t\";\n                else if (char == 0x0a) output[outputLength++] = \"n\";\n                else if (char == 0x0c) output[outputLength++] = \"f\";\n                else if (char == 0x0d) output[outputLength++] = \"r\";\n                else if (char == 0x5c) output[outputLength++] = \"\\\\\";\n                else if (char == 0x22) {\n                    // solhint-disable-next-line quotes\n                    output[outputLength++] = '\"';\n                }\n            } else {\n                output[outputLength++] = char;\n            }\n        }\n        // write the actual length and deallocate unused memory\n        assembly (\"memory-safe\") {\n            mstore(output, outputLength)\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\n        }\n\n        return string(output);\n    }\n\n    /**\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\n     *\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\n     * assembly block as such would prevent some optimizations.\n     */\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\n        assembly (\"memory-safe\") {\n            value := mload(add(buffer, add(0x20, offset)))\n        }\n    }\n}\n"
      },
      "contracts/RewardGauge.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.26;\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\r\nimport \"./RewardToken.sol\";\r\n\r\ncontract RewardGauge {\r\n    using MessageHashUtils for bytes32;      // ‚Üê attaches .toEthSignedMessageHash()\r\n\r\n    RewardToken public immutable token;\r\n    mapping(address => uint16) public lastScore;   // 0‚Äì10 000 (basis-points)\r\n\r\n    uint16  public constant THRESHOLD = 6000;      // ‚â• 0.60 gets bonus\r\n    uint256 public constant BONUS     = 1e18;      // 1 xREP\r\n\r\n    constructor(address tokenAddr) { token = RewardToken(tokenAddr); }\r\n\r\n    /// repHash = keccak256(abi.encodePacked(provider, scoreBps, epoch))\r\n    function submitScore(\r\n        bytes32 repHash,\r\n        uint16  scoreBps,\r\n        bytes   calldata sig\r\n    ) external {\r\n        // MessageHashUtils gives us the ‚ÄúEthereum signed message‚Äù prefix\r\n        bytes32 digest   = repHash.toEthSignedMessageHash();\r\n        address provider = ECDSA.recover(digest, sig);\r\n\r\n        require(scoreBps >= lastScore[provider], \"score not improved\");\r\n        lastScore[provider] = scoreBps;\r\n\r\n        if (scoreBps >= THRESHOLD) {\r\n            token.mint(provider, BONUS);\r\n        }\r\n    }\r\n}\r\n"
      },
      "contracts/RewardToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.26;\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract RewardToken is ERC20 {\r\n    constructor() ERC20(\"Axintera Reward\", \"xREP\") {}\r\n    function mint(address to, uint256 amt) external { _mint(to, amt); }\r\n}\r\n"
      }
    },
    "settings": {
      "evmVersion": "paris",
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "sources": {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
          "exportedSymbols": {
            "IERC1155Errors": [
              136
            ],
            "IERC20Errors": [
              41
            ],
            "IERC721Errors": [
              89
            ]
          },
          "id": 137,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
===== onchain/ignition/deployments/chain-545/deployed_addresses.json =====
{
  "RewardGaugeModule#RewardGauge": "0xf6e6C656Da6F7A0B1F2AAd8AF87B6cC6f220BF6b"
}
===== onchain/ignition/deployments/chain-545/journal.jsonl =====

{"chainId":545,"type":"DEPLOYMENT_INITIALIZE"}
{"artifactId":"RewardGaugeModule#RewardGauge","constructorArgs":["0x5FbDB2315678afecb367f032d93F642f64180aa3"],"contractName":"RewardGauge","dependencies":[],"from":"0x25d40008ffc27d95d506224a246916d7e7ac0f36","futureId":"RewardGaugeModule#RewardGauge","futureType":"NAMED_ARTIFACT_CONTRACT_DEPLOYMENT","libraries":{},"strategy":"basic","strategyConfig":{},"type":"DEPLOYMENT_EXECUTION_STATE_INITIALIZE","value":{"_kind":"bigint","value":"0"}}
{"futureId":"RewardGaugeModule#RewardGauge","networkInteraction":{"data":"0x60a060405234801561001057600080fd5b50604051610be6380380610be6833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610ac861011e6000396000818161027601526103350152610ac86000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634b8624c41461005c578063785ffb371461007a578063e1de4c2a14610098578063eb60db67146100b4578063fc0c546a146100e4575b600080fd5b610064610102565b6040516100719190610686565b60405180910390f35b61008261010e565b60405161008f91906106be565b60405180910390f35b6100b260048036038101906100ad91906107aa565b610114565b005b6100ce60048036038101906100c9919061087c565b610312565b6040516100db91906106be565b60405180910390f35b6100ec610333565b6040516100f99190610908565b60405180910390f35b670de0b6b3a764000081565b61177081565b600061011f85610357565b905060006101718285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061038d565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff168561ffff16101561020a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020190610980565b60405180910390fd5b846000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555061177061ffff168561ffff161061030a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1982670de0b6b3a76400006040518363ffffffff1660e01b81526004016102d79291906109af565b600060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050505b505050505050565b60006020528060005260406000206000915054906101000a900461ffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b60008060008061039d86866103b9565b9250925092506103ad8282610415565b82935050505092915050565b600080600060418451036103fe5760008060006020870151925060408701519150606087015160001a90506103f088828585610579565b95509550955050505061040e565b60006002855160001b9250925092505b9250925092565b60006003811115610429576104286109d8565b5b82600381111561043c5761043b6109d8565b5b03156105755760016003811115610456576104556109d8565b5b826003811115610469576104686109d8565b5b036104a0576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156104b4576104b36109d8565b5b8260038111156104c7576104c66109d8565b5b0361050c578060001c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016105039190610686565b60405180910390fd5b60038081111561051f5761051e6109d8565b5b826003811115610532576105316109d8565b5b0361057457806040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260040161056b9190610a16565b60405180910390fd5b5b5050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c11156105b9576000600385925092509250610663565b6000600188888888604051600081526020016040526040516105de9493929190610a4d565b6020604051602081039080840390855afa158015610600573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361065457600060016000801b93509350935050610663565b8060008060001b935093509350505b9450945094915050565b6000819050919050565b6106808161066d565b82525050565b600060208201905061069b6000830184610677565b92915050565b600061ffff82169050919050565b6106b8816106a1565b82525050565b60006020820190506106d360008301846106af565b92915050565b600080fd5b600080fd5b6000819050919050565b6106f6816106e3565b811461070157600080fd5b50565b600081359050610713816106ed565b92915050565b610722816106a1565b811461072d57600080fd5b50565b60008135905061073f81610719565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261076a57610769610745565b5b8235905067ffffffffffffffff8111156107875761078661074a565b5b6020830191508360018202830111156107a3576107a261074f565b5b9250929050565b600080600080606085870312156107c4576107c36106d9565b5b60006107d287828801610704565b94505060206107e387828801610730565b935050604085013567ffffffffffffffff811115610804576108036106de565b5b61081087828801610754565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108498261081e565b9050919050565b6108598161083e565b811461086457600080fd5b50565b60008135905061087681610850565b92915050565b600060208284031215610892576108916106d9565b5b60006108a084828501610867565b91505092915050565b6000819050919050565b60006108ce6108c96108c48461081e565b6108a9565b61081e565b9050919050565b60006108e0826108b3565b9050919050565b60006108f2826108d5565b9050919050565b610902816108e7565b82525050565b600060208201905061091d60008301846108f9565b92915050565b600082825260208201905092915050565b7f73636f7265206e6f7420696d70726f7665640000000000000000000000000000600082015250565b600061096a601283610923565b915061097582610934565b602082019050919050565b600060208201905081810360008301526109998161095d565b9050919050565b6109a98161083e565b82525050565b60006040820190506109c460008301856109a0565b6109d16020830184610677565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610a10816106e3565b82525050565b6000602082019050610a2b6000830184610a07565b92915050565b600060ff82169050919050565b610a4781610a31565b82525050565b6000608082019050610a626000830187610a07565b610a6f6020830186610a3e565b610a7c6040830185610a07565b610a896060830184610a07565b9594505050505056fea2646970667358221220923cca873607314a3481bf536eae59c49a30dd521b85afa62b9fd25b0572e25664736f6c634300081c00330000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3","id":1,"type":"ONCHAIN_INTERACTION","value":{"_kind":"bigint","value":"0"}},"type":"NETWORK_INTERACTION_REQUEST"}
{"futureId":"RewardGaugeModule#RewardGauge","networkInteractionId":1,"nonce":45,"type":"TRANSACTION_PREPARE_SEND"}
{"futureId":"RewardGaugeModule#RewardGauge","networkInteractionId":1,"nonce":45,"transaction":{"fees":{"maxFeePerGas":{"_kind":"bigint","value":"100000002"},"maxPriorityFeePerGas":{"_kind":"bigint","value":"100000000"}},"hash":"0x289642d67cca9282900474abeec2c5892dbc1647d1cd7798fd4b8a6c5af0e049"},"type":"TRANSACTION_SEND"}
{"futureId":"RewardGaugeModule#RewardGauge","hash":"0x289642d67cca9282900474abeec2c5892dbc1647d1cd7798fd4b8a6c5af0e049","networkInteractionId":1,"receipt":{"blockHash":"0x2f7ee21f425cd167b867157c8b745a83f940efaf82c3c501a21afd1e541d52a0","blockNumber":55997175,"contractAddress":"0xf6e6C656Da6F7A0B1F2AAd8AF87B6cC6f220BF6b","logs":[],"status":"SUCCESS"},"type":"TRANSACTION_CONFIRM"}
{"futureId":"RewardGaugeModule#RewardGauge","result":{"address":"0xf6e6C656Da6F7A0B1F2AAd8AF87B6cC6f220BF6b","type":"SUCCESS"},"type":"DEPLOYMENT_EXECUTION_STATE_COMPLETE"}===== onchain/ignition/modules/RewardGaugeModule.js =====
// ignition/RewardGaugeModule.js

const { buildModule } = require("@nomicfoundation/hardhat-ignition/modules");

// you can parameterize things via CLI:
//   npx hardhat ignition --network flowTestnet --param rewardToken=0xABC...
module.exports = buildModule("RewardGaugeModule", (m) => {
  // fetch a constructor param or fall back to this default
  const rewardToken = m.getParameter(
    "rewardToken",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3" // your test‚Äêtoken address
  );

  // deploy the proxy (or regular) contract
  const gauge = m.contract("RewardGauge", [rewardToken], {
    // if you want to send ETH/wei on creation:
    // value: m.getParameter("fundingAmount", 1_000_000_000_000_000_000n)
  });

  return { gauge };
});
===== onchain/package-lock.json =====
{
  "name": "onchain",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "onchain",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "dotenv": "^17.0.1"
      },
      "devDependencies": {
        "@nomicfoundation/hardhat-ignition": "^0.15.12",
        "@nomicfoundation/hardhat-toolbox-viem": "^4.0.0",
        "@nomiclabs/hardhat-ethers": "^2.2.3",
        "@openzeppelin/contracts": "^5.3.0",
        "chai": "^4.3.7",
        "ethers": "^5.8.0",
        "hardhat": "^2.25.0",
        "mocha": "^11.7.1"
      }
    },
    "node_modules/@adraffy/ens-normalize": {
      "version": "1.10.1",
      "resolved": "https://registry.npmjs.org/@adraffy/ens-normalize/-/ens-normalize-1.10.1.tgz",
      "integrity": "sha512-96Z2IP3mYmF1Xg2cDm8f1gWGf/HUVedQ3FMifV4kG/PQ4yEP51xDtRAEfhVNt5f/uzpNkZHwWQuUcu6D6K+Ekw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@colors/colors": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.5.0.tgz",
      "integrity": "sha512-ooWCrlZP11i8GImSjTHYHLkvFDP48nS4+204nGb1RiX/WXYHmJA2III9/e2DWVabCESdW7hBAEzHRqUn9OUVvQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "peer": true,
      "engines": {
        "node": ">=0.1.90"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@ethereumjs/rlp": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/@ethereumjs/rlp/-/rlp-5.0.2.tgz",
      "integrity": "sha512-DziebCdg4JpGlEqEdGgXmjqcFoJi+JGulUXwEjsZGAscAQ7MyD/7LE/GVCP29vEQxKc7AAwjT3A2ywHp2xfoCA==",
      "dev": true,
      "license": "MPL-2.0",
      "bin": {
        "rlp": "bin/rlp.cjs"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@ethereumjs/util": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/@ethereumjs/util/-/util-9.1.0.tgz",
      "integrity": "sha512-XBEKsYqLGXLah9PNJbgdkigthkG7TAGvlD/sH12beMXEyHDyigfcbdvHhmLyDWgDyOJn4QwiQUaF7yeuhnjdog==",
      "dev": true,
      "license": "MPL-2.0",
      "dependencies": {
        "@ethereumjs/rlp": "^5.0.2",
        "ethereum-cryptography": "^2.2.1"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@ethereumjs/util/node_modules/@noble/curves": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.4.2.tgz",
      "integrity": "sha512-TavHr8qycMChk8UwMld0ZDRvatedkzWfH8IiaeGCfymOP5i0hSCozz9vHOL0nkwk7HRMlFnAiKpS2jrUmSybcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@noble/hashes": "1.4.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@ethereumjs/util/node_modules/@noble/hashes": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.4.0.tgz",
===== onchain/package.json =====
{
  "name": "onchain",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "devDependencies": {
    "@nomicfoundation/hardhat-ignition": "^0.15.12",
    "@nomicfoundation/hardhat-toolbox-viem": "^4.0.0",
    "@nomiclabs/hardhat-ethers": "^2.2.3",
    "@openzeppelin/contracts": "^5.3.0",
    "chai": "^4.3.7",
    "ethers": "^5.8.0",
    "hardhat": "^2.25.0",
    "mocha": "^11.7.1"
  },
  "dependencies": {
    "dotenv": "^17.0.1"
  }
}
===== onchain/test/gauge.js =====
// onchain/test/gauge.js
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("RewardGauge ‚Äì debug run", function () {
  it("stores the new score and mints 1 xREP", async function () {
    const [provider] = await ethers.getSigners();
    console.log("Provider :", provider.address);

    /* deploy token */
    const Token = await ethers.getContractFactory("RewardToken");
    const token = await Token.deploy();
    await token.deployed();
    console.log("Token    :", token.address);

    /* deploy gauge */
    const Gauge = await ethers.getContractFactory("RewardGauge");
    const gauge = await Gauge.deploy(token.address);
    await gauge.deployed();
    console.log("Gauge    :", gauge.address);

    /* build + sign repHash */
    const scoreBps = 7500;
    const epoch    = 0n;                         // deterministic
    const repHash  = ethers.utils.solidityKeccak256(
      ["address","uint16","uint64"],
      [provider.address, scoreBps, epoch]
    );
    const sig = await provider.signMessage(ethers.utils.arrayify(repHash));

    /* call */
    const tx = await gauge.submitScore(repHash, scoreBps, sig);
    await tx.wait();

    /* read state */
    const stored = await gauge.lastScore(provider.address);
    const bal    = await token.balanceOf(provider.address);

    console.log("storedScore:", stored.toString());
    console.log("balance    :", bal.toString());

    /* assertions */
    expect(Number(stored)).to.equal(scoreBps);  // Convert BigInt/BigNumber to number
    expect(bal.toString()).to.equal(ethers.utils.parseEther("1").toString());  // Compare string values
  });
});===== pipeline.py =====
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Dict, Any, Optional, List
import logging
from enum import Enum
import random
import time
from datetime import datetime
import os
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('Pipeline')

# Load environment variables
load_dotenv()

class PipelineStageType(Enum):
    """Pipeline processing stages"""
    INITIALIZATION = "initialization"
    VALIDATION = "validation"
    DATA_GENERATION = "data_generation"
    STORAGE = "storage"
    SUBMISSION = "submission"

@dataclass
class PipelineContext:
    """Context object passed through the pipeline stages"""
    rfd: Dict[str, Any]
    stage_results: Dict[PipelineStageType, Any] = None
    errors: List[str] = None
    
    def __post_init__(self):
        self.stage_results = {}
        self.errors = []
    
    def add_stage_result(self, stage: PipelineStageType, result: Any):
        """Add a result from a pipeline stage"""
        self.stage_results[stage] = result
    
    def get_stage_result(self, stage: PipelineStageType) -> Optional[Any]:
        """Get a result from a pipeline stage"""
        return self.stage_results.get(stage)
    
    def add_error(self, error: str):
        """Add an error to the context"""
        self.errors.append(error)

class PipelineStage(ABC):
    """Abstract base class for pipeline stages"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.mock_mode = os.getenv("MOCK_MODE", "false").lower() == "true"
        self.test_mode = os.getenv("TEST_MODE", "false").lower() == "true"
    
    @abstractmethod
    def process(self, context: PipelineContext) -> PipelineContext:
        """Process the pipeline stage
        
        Args:
            context: The pipeline context containing RFD and stage results
            
        Returns:
            Updated pipeline context
        """
        pass
    
    @abstractmethod
    def validate(self, context: PipelineContext) -> bool:
        """Validate if the stage can process the context
        
        Args:
            context: The pipeline context to validate
            
        Returns:
            True if valid, False otherwise
        """
        pass

class ValidationStage(PipelineStage):
    """Validates RFD and configuration"""
    
    def validate(self, context: PipelineContext) -> bool:
        required_fields = ["rfd_id", "name", "description", "schema"]
        return all(field in context.rfd for field in required_fields)
    
    def process(self, context: PipelineContext) -> PipelineContext:
        if not self.validate(context):
            context.add_error("Invalid RFD format")
            return context
            
        # Add validation logic here
        context.add_stage_result(PipelineStageType.VALIDATION, {"valid": True})
        return context

===== poetry.lock =====
# This file is automatically @generated by Poetry 2.1.3 and should not be changed by hand.

[[package]]
name = "aiohappyeyeballs"
version = "2.6.1"
description = "Happy Eyeballs for asyncio"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "aiohappyeyeballs-2.6.1-py3-none-any.whl", hash = "sha256:f349ba8f4b75cb25c99c5c2d84e997e485204d2902a9597802b0371f09331fb8"},
    {file = "aiohappyeyeballs-2.6.1.tar.gz", hash = "sha256:c3f9d0113123803ccadfdf3f0faa505bc78e6a72d1cc4806cbd719826e943558"},
]

[[package]]
name = "aiohttp"
version = "3.12.13"
description = "Async http client/server framework (asyncio)"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "aiohttp-3.12.13-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:5421af8f22a98f640261ee48aae3a37f0c41371e99412d55eaf2f8a46d5dad29"},
    {file = "aiohttp-3.12.13-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:0fcda86f6cb318ba36ed8f1396a6a4a3fd8f856f84d426584392083d10da4de0"},
    {file = "aiohttp-3.12.13-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:4cd71c9fb92aceb5a23c4c39d8ecc80389c178eba9feab77f19274843eb9412d"},
    {file = "aiohttp-3.12.13-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:34ebf1aca12845066c963016655dac897651e1544f22a34c9b461ac3b4b1d3aa"},
    {file = "aiohttp-3.12.13-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:893a4639694c5b7edd4bdd8141be296042b6806e27cc1d794e585c43010cc294"},
    {file = "aiohttp-3.12.13-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:663d8ee3ffb3494502ebcccb49078faddbb84c1d870f9c1dd5a29e85d1f747ce"},
    {file = "aiohttp-3.12.13-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f0f8f6a85a0006ae2709aa4ce05749ba2cdcb4b43d6c21a16c8517c16593aabe"},
    {file = "aiohttp-3.12.13-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:1582745eb63df267c92d8b61ca655a0ce62105ef62542c00a74590f306be8cb5"},
    {file = "aiohttp-3.12.13-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d59227776ee2aa64226f7e086638baa645f4b044f2947dbf85c76ab11dcba073"},
    {file = "aiohttp-3.12.13-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:06b07c418bde1c8e737d8fa67741072bd3f5b0fb66cf8c0655172188c17e5fa6"},
    {file = "aiohttp-3.12.13-cp310-cp310-musllinux_1_2_armv7l.whl", hash = "sha256:9445c1842680efac0f81d272fd8db7163acfcc2b1436e3f420f4c9a9c5a50795"},
    {file = "aiohttp-3.12.13-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:09c4767af0b0b98c724f5d47f2bf33395c8986995b0a9dab0575ca81a554a8c0"},
    {file = "aiohttp-3.12.13-cp310-cp310-musllinux_1_2_ppc64le.whl", hash = "sha256:f3854fbde7a465318ad8d3fc5bef8f059e6d0a87e71a0d3360bb56c0bf87b18a"},
    {file = "aiohttp-3.12.13-cp310-cp310-musllinux_1_2_s390x.whl", hash = "sha256:2332b4c361c05ecd381edb99e2a33733f3db906739a83a483974b3df70a51b40"},
    {file = "aiohttp-3.12.13-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:1561db63fa1b658cd94325d303933553ea7d89ae09ff21cc3bcd41b8521fbbb6"},
    {file = "aiohttp-3.12.13-cp310-cp310-win32.whl", hash = "sha256:a0be857f0b35177ba09d7c472825d1b711d11c6d0e8a2052804e3b93166de1ad"},
    {file = "aiohttp-3.12.13-cp310-cp310-win_amd64.whl", hash = "sha256:fcc30ad4fb5cb41a33953292d45f54ef4066746d625992aeac33b8c681173178"},
    {file = "aiohttp-3.12.13-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:7c229b1437aa2576b99384e4be668af1db84b31a45305d02f61f5497cfa6f60c"},
    {file = "aiohttp-3.12.13-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:04076d8c63471e51e3689c93940775dc3d12d855c0c80d18ac5a1c68f0904358"},
    {file = "aiohttp-3.12.13-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:55683615813ce3601640cfaa1041174dc956d28ba0511c8cbd75273eb0587014"},
    {file = "aiohttp-3.12.13-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:921bc91e602d7506d37643e77819cb0b840d4ebb5f8d6408423af3d3bf79a7b7"},
    {file = "aiohttp-3.12.13-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:e72d17fe0974ddeae8ed86db297e23dba39c7ac36d84acdbb53df2e18505a013"},
    {file = "aiohttp-3.12.13-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:0653d15587909a52e024a261943cf1c5bdc69acb71f411b0dd5966d065a51a47"},
    {file = "aiohttp-3.12.13-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:a77b48997c66722c65e157c06c74332cdf9c7ad00494b85ec43f324e5c5a9b9a"},
    {file = "aiohttp-3.12.13-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d6946bae55fd36cfb8e4092c921075cde029c71c7cb571d72f1079d1e4e013bc"},
    {file = "aiohttp-3.12.13-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:4f95db8c8b219bcf294a53742c7bda49b80ceb9d577c8e7aa075612b7f39ffb7"},
    {file = "aiohttp-3.12.13-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:03d5eb3cfb4949ab4c74822fb3326cd9655c2b9fe22e4257e2100d44215b2e2b"},
    {file = "aiohttp-3.12.13-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:6383dd0ffa15515283c26cbf41ac8e6705aab54b4cbb77bdb8935a713a89bee9"},
    {file = "aiohttp-3.12.13-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:6548a411bc8219b45ba2577716493aa63b12803d1e5dc70508c539d0db8dbf5a"},
    {file = "aiohttp-3.12.13-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:81b0fcbfe59a4ca41dc8f635c2a4a71e63f75168cc91026c61be665945739e2d"},
    {file = "aiohttp-3.12.13-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:6a83797a0174e7995e5edce9dcecc517c642eb43bc3cba296d4512edf346eee2"},
    {file = "aiohttp-3.12.13-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:a5734d8469a5633a4e9ffdf9983ff7cdb512524645c7a3d4bc8a3de45b935ac3"},
    {file = "aiohttp-3.12.13-cp311-cp311-win32.whl", hash = "sha256:fef8d50dfa482925bb6b4c208b40d8e9fa54cecba923dc65b825a72eed9a5dbd"},
    {file = "aiohttp-3.12.13-cp311-cp311-win_amd64.whl", hash = "sha256:9a27da9c3b5ed9d04c36ad2df65b38a96a37e9cfba6f1381b842d05d98e6afe9"},
    {file = "aiohttp-3.12.13-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:0aa580cf80558557285b49452151b9c69f2fa3ad94c5c9e76e684719a8791b73"},
    {file = "aiohttp-3.12.13-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:b103a7e414b57e6939cc4dece8e282cfb22043efd0c7298044f6594cf83ab347"},
    {file = "aiohttp-3.12.13-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:78f64e748e9e741d2eccff9597d09fb3cd962210e5b5716047cbb646dc8fe06f"},
    {file = "aiohttp-3.12.13-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:29c955989bf4c696d2ededc6b0ccb85a73623ae6e112439398935362bacfaaf6"},
    {file = "aiohttp-3.12.13-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:d640191016763fab76072c87d8854a19e8e65d7a6fcfcbf017926bdbbb30a7e5"},
    {file = "aiohttp-3.12.13-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:4dc507481266b410dede95dd9f26c8d6f5a14315372cc48a6e43eac652237d9b"},
    {file = "aiohttp-3.12.13-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8a94daa873465d518db073bd95d75f14302e0208a08e8c942b2f3f1c07288a75"},
    {file = "aiohttp-3.12.13-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:177f52420cde4ce0bb9425a375d95577fe082cb5721ecb61da3049b55189e4e6"},
    {file = "aiohttp-3.12.13-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0f7df1f620ec40f1a7fbcb99ea17d7326ea6996715e78f71a1c9a021e31b96b8"},
    {file = "aiohttp-3.12.13-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:3062d4ad53b36e17796dce1c0d6da0ad27a015c321e663657ba1cc7659cfc710"},
    {file = "aiohttp-3.12.13-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:8605e22d2a86b8e51ffb5253d9045ea73683d92d47c0b1438e11a359bdb94462"},
    {file = "aiohttp-3.12.13-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:54fbbe6beafc2820de71ece2198458a711e224e116efefa01b7969f3e2b3ddae"},
    {file = "aiohttp-3.12.13-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:050bd277dfc3768b606fd4eae79dd58ceda67d8b0b3c565656a89ae34525d15e"},
    {file = "aiohttp-3.12.13-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:2637a60910b58f50f22379b6797466c3aa6ae28a6ab6404e09175ce4955b4e6a"},
    {file = "aiohttp-3.12.13-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:e986067357550d1aaa21cfe9897fa19e680110551518a5a7cf44e6c5638cb8b5"},
    {file = "aiohttp-3.12.13-cp312-cp312-win32.whl", hash = "sha256:ac941a80aeea2aaae2875c9500861a3ba356f9ff17b9cb2dbfb5cbf91baaf5bf"},
    {file = "aiohttp-3.12.13-cp312-cp312-win_amd64.whl", hash = "sha256:671f41e6146a749b6c81cb7fd07f5a8356d46febdaaaf07b0e774ff04830461e"},
    {file = "aiohttp-3.12.13-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:d4a18e61f271127465bdb0e8ff36e8f02ac4a32a80d8927aa52371e93cd87938"},
    {file = "aiohttp-3.12.13-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:532542cb48691179455fab429cdb0d558b5e5290b033b87478f2aa6af5d20ace"},
    {file = "aiohttp-3.12.13-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:d7eea18b52f23c050ae9db5d01f3d264ab08f09e7356d6f68e3f3ac2de9dfabb"},
    {file = "aiohttp-3.12.13-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ad7c8e5c25f2a26842a7c239de3f7b6bfb92304593ef997c04ac49fb703ff4d7"},
    {file = "aiohttp-3.12.13-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:6af355b483e3fe9d7336d84539fef460120c2f6e50e06c658fe2907c69262d6b"},
    {file = "aiohttp-3.12.13-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a95cf9f097498f35c88e3609f55bb47b28a5ef67f6888f4390b3d73e2bac6177"},
    {file = "aiohttp-3.12.13-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:b8ed8c38a1c584fe99a475a8f60eefc0b682ea413a84c6ce769bb19a7ff1c5ef"},
    {file = "aiohttp-3.12.13-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7a0b9170d5d800126b5bc89d3053a2363406d6e327afb6afaeda2d19ee8bb103"},
    {file = "aiohttp-3.12.13-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:372feeace612ef8eb41f05ae014a92121a512bd5067db8f25101dd88a8db11da"},
    {file = "aiohttp-3.12.13-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:a946d3702f7965d81f7af7ea8fb03bb33fe53d311df48a46eeca17e9e0beed2d"},
    {file = "aiohttp-3.12.13-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:a0c4725fae86555bbb1d4082129e21de7264f4ab14baf735278c974785cd2041"},
    {file = "aiohttp-3.12.13-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:9b28ea2f708234f0a5c44eb6c7d9eb63a148ce3252ba0140d050b091b6e842d1"},
    {file = "aiohttp-3.12.13-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:d4f5becd2a5791829f79608c6f3dc745388162376f310eb9c142c985f9441cc1"},
    {file = "aiohttp-3.12.13-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:60f2ce6b944e97649051d5f5cc0f439360690b73909230e107fd45a359d3e911"},
    {file = "aiohttp-3.12.13-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:69fc1909857401b67bf599c793f2183fbc4804717388b0b888f27f9929aa41f3"},
    {file = "aiohttp-3.12.13-cp313-cp313-win32.whl", hash = "sha256:7d7e68787a2046b0e44ba5587aa723ce05d711e3a3665b6b7545328ac8e3c0dd"},
    {file = "aiohttp-3.12.13-cp313-cp313-win_amd64.whl", hash = "sha256:5a178390ca90419bfd41419a809688c368e63c86bd725e1186dd97f6b89c2706"},
    {file = "aiohttp-3.12.13-cp39-cp39-macosx_10_9_universal2.whl", hash = "sha256:36f6c973e003dc9b0bb4e8492a643641ea8ef0e97ff7aaa5c0f53d68839357b4"},
    {file = "aiohttp-3.12.13-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:6cbfc73179bd67c229eb171e2e3745d2afd5c711ccd1e40a68b90427f282eab1"},
    {file = "aiohttp-3.12.13-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:1e8b27b2d414f7e3205aa23bb4a692e935ef877e3a71f40d1884f6e04fd7fa74"},
    {file = "aiohttp-3.12.13-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:eabded0c2b2ef56243289112c48556c395d70150ce4220d9008e6b4b3dd15690"},
    {file = "aiohttp-3.12.13-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:003038e83f1a3ff97409999995ec02fe3008a1d675478949643281141f54751d"},
    {file = "aiohttp-3.12.13-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1b6f46613031dbc92bdcaad9c4c22c7209236ec501f9c0c5f5f0b6a689bf50f3"},
    {file = "aiohttp-3.12.13-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:c332c6bb04650d59fb94ed96491f43812549a3ba6e7a16a218e612f99f04145e"},
    {file = "aiohttp-3.12.13-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3fea41a2c931fb582cb15dc86a3037329e7b941df52b487a9f8b5aa960153cbd"},
    {file = "aiohttp-3.12.13-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:846104f45d18fb390efd9b422b27d8f3cf8853f1218c537f36e71a385758c896"},
    {file = "aiohttp-3.12.13-cp39-cp39-musllinux_1_2_aarch64.whl", hash = "sha256:5d6c85ac7dd350f8da2520bac8205ce99df4435b399fa7f4dc4a70407073e390"},
===== pyproject.toml =====
[project]
name = "axintera"
version = "0.1.0"
description = "Axintera ‚Äì Reppo solver with reputation layer"
authors = [
    {name = "Martel Axe",email = "you@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = "^3.12"
dependencies = [
    "web3 (>=7.12.0,<8.0.0)",
    "requests (>=2.32.4,<3.0.0)",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "click (>=8.2.1,<9.0.0)",
    "json5 (>=0.12.0,<0.13.0)",
    "sqlmodel (>=0.0.24,<0.0.25)",
    "fastapi (>=0.115.14,<0.116.0)",
    "uvicorn (>=0.35.0,<0.36.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
package-mode = false

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-mock = "^3.14.1"
ruff = "^0.12.2"
black = "^25.1.0"

===== reputation.py =====
"""
reputation.py ‚Äì Axintera lightweight telemetry
Creates/updates   state/stats.db

Table:
  provider_id TEXT PK
  served      INT
  success     INT
  score       REAL   (Wilson lower-bound, 0-1)
"""

import sqlite3, threading, math, asyncio
from pathlib import Path

# ‚îÄ‚îÄ‚îÄ paths & locks ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DB_PATH = Path(__file__).resolve().parent / "state" / "stats.db"
_LOCK   = threading.Lock()

# ‚îÄ‚îÄ‚îÄ bootstrap ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def init_db() -> None:
    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    with _LOCK, sqlite3.connect(DB_PATH) as c:
        c.execute(
            "CREATE TABLE IF NOT EXISTS providerstat ("
            " provider_id TEXT PRIMARY KEY,"
            " served      INTEGER DEFAULT 0,"
            " success     INTEGER DEFAULT 0,"
            " score       REAL    DEFAULT 0)"
        )
        c.commit()

init_db()           # run once on import

# ‚îÄ‚îÄ‚îÄ counter helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def update_stats(provider_id: str, ok: bool) -> None:
    """
    +1 to served; +1 to success if ok.
    Inserts (score = 0) on first sight.
    """
    with _LOCK, sqlite3.connect(DB_PATH) as c:
        c.execute(
            """
            INSERT INTO providerstat (provider_id, served, success, score)
            VALUES (?, 1, ?, 0)
            ON CONFLICT(provider_id) DO UPDATE SET
              served  = served  + 1,
              success = success + ?
            """,
            (provider_id.lower(), int(ok), int(ok)),
        )
        c.commit()

# ‚îÄ‚îÄ‚îÄ scoring helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def wilson(success: int, served: int, z: float = 1.96) -> float:
    """95 % Wilson lower-bound."""
    if served == 0:
        return 0.0
    phat  = success / served
    denom = 1 + z**2 / served
    centre = phat + z**2 / (2 * served)
    adj   = z * math.sqrt((phat * (1 - phat) + z**2 / (4 * served)) / served)
    return round((centre - adj) / denom, 4)

async def hourly_recalc() -> None:
    """Recompute score for every provider once per hour."""
    while True:
        with _LOCK, sqlite3.connect(DB_PATH) as c:
            rows = c.execute(
                "SELECT provider_id, served, success FROM providerstat"
            ).fetchall()
            for pid, served, success in rows:
                score = wilson(success, served)
                c.execute(
                    "UPDATE providerstat SET score=? WHERE provider_id=?",
                    (score, pid),
                )
            c.commit()
        await asyncio.sleep(3600)          # lower during demos if you like
===== requirements.txt =====
# Web3 and Ethereum interaction
web3>=6.10.0
eth-account>=0.9.0
eth-typing>=3.4.0
eth-utils>=2.2.0

# HTTP requests for APIs
requests>=2.31.0

# Environment variable management
python-dotenv>=1.0.0

# JSON processing
json5>=0.9.14

# Optional - for async operations
aiohttp>=3.8.5

# Optional - for better error handling
python-decouple>=3.8

# Optional - for CLI interfaces
click>=8.1.7

# Testing
pytest>=7.4.0
pytest-mock>=3.11.1===== rfdListener.py =====
import os
import json
from web3 import Web3
from dotenv import load_dotenv
import time
from typing import Dict, Optional

# Load environment variables
load_dotenv()

class RFDListener:
    def __init__(self):
        self.rpc_url = os.environ.get("WEB3_RPC_URL")
        self.exchange_contract_address = os.environ.get("EXCHANGE_CONTRACT_ADDRESS")
        self.exchange_contract_abi_path = os.environ.get("EXCHANGE_CONTRACT_ABI_PATH", "./abis/exchange_abi.json")
        self.chain_id = int(os.environ.get("CHAIN_ID", "1"))

        if not all([self.rpc_url, self.exchange_contract_address]):
            raise ValueError("Missing required environment variables: WEB3_RPC_URL or EXCHANGE_CONTRACT_ADDRESS")

        self.web3 = Web3(Web3.HTTPProvider(self.rpc_url))
        self._initialize_contract()

    def _initialize_contract(self):
        """Initialize the Exchange contract"""
        with open(self.exchange_contract_abi_path, 'r') as abi_file:
            abi = json.load(abi_file)
        self.contract = self.web3.eth.contract(
            address=self.web3.to_checksum_address(self.exchange_contract_address),
            abi=abi
        )

    def listen_for_rfds(self, callback: callable) -> None:
        """Listen for new RFD events and pass them to a callback function"""
        # Assumed event: RFDPosted(string rfdId, string name, string description, string schema)
        event_filter = self.contract.events.RFDPosted.create_filter(from_block="latest")
        print("Listening for new RFDs...")

        while True:
            try:
                for event in event_filter.get_new_entries():
                    rfd = {
                        "rfd_id": event['args']['rfdId'],
                        "name": event['args']['name'],
                        "description": event['args']['description'],
                        "schema": json.loads(event['args']['schema'])  # Parse schema from string to dict
                    }
                    print(f"New RFD detected: ID={rfd['rfd_id']}, Name={rfd['name']}")
                    callback(rfd)
            except Exception as e:
                print(f"Error listening for RFDs: {str(e)}")
            time.sleep(10)  # Poll every 10 seconds

if __name__ == "__main__":
    def dummy_callback(rfd: Dict):
        print(f"Processing RFD: {rfd}")

    listener = RFDListener()
    listener.listen_for_rfds(dummy_callback)===== sample_rfd.json =====
{
  "rfd_id": "test_rfd_001",
  "name": "Test RFD for Mock Data Generation",
  "description": "A test RFD for verifying mock data generation capabilities",
  "schema": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer",
        "description": "Unique identifier for each record"
      },
      "name": {
        "type": "string",
        "description": "Name of the entity"
      },
      "value": {
        "type": "number",
        "description": "Numeric value associated with the entity"
      },
      "is_active": {
        "type": "boolean",
        "description": "Whether the entity is active"
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of tags associated with the entity"
      },
      "metadata": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "required": ["id", "name", "value", "is_active", "tags", "metadata"]
  },
  "num_records": 5
}
===== sample_rfd2.json =====
{
    "rfd_id": "sf_weather_may_aug_001",
    "name": "Synthetic Weather Data for San Francisco (May to August)",
    "description": "A synthetic dataset containing daily weather information for San Francisco from May to August, including temperature, humidity, and precipitation.",
    "schema": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date"
        },
        "temperature": {
          "type": "number",
          "description": "Average daily temperature in degrees Fahrenheit"
        },
        "humidity": {
          "type": "number",
          "description": "Average daily humidity percentage"
        },
        "precipitation": {
          "type": "number",
          "description": "Daily precipitation in inches"
        }
      },
      "required": ["date", "temperature", "humidity", "precipitation"]
    }
  }
===== score_service.py =====
from fastapi import FastAPI, HTTPException
import reputation, sqlite3, os

app = FastAPI(title="Axintera Score API")

@app.on_event("startup")
async def boot():
    reputation.init_db()

@app.get("/score/{provider_id}")
def get_score(provider_id: str):
    with sqlite3.connect(reputation.DB_PATH) as c:
        row = c.execute(
            "SELECT served, success, score FROM providerstat WHERE provider_id=?",
            (provider_id.lower(),),
        ).fetchone()
    if not row:
        raise HTTPException(404, "provider not found")
    served, success, score = row
    return {"provider_id": provider_id, "served": served, "success": success, "score": score}
===== solverNode.py =====
# solverNode.py
"""
Main orchestration script for the Reppo solver node + Axintera reputation layer
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Modes
 ‚Ä¢ MOCK  ‚Äì local run, fake wallet, no chain/IPFS
 ‚Ä¢ TEST  ‚Äì real data generation, skips on-chain calls
 ‚Ä¢ PROD  ‚Äì full pipeline (NFT check, IPFS, submitSolution)

Reputation layer
 ‚Ä¢ Creates   state/stats.db            (see reputation.py)
 ‚Ä¢ Records   served / success counters per wallet address
"""

import os, json, time, logging
from typing import Dict, Optional, List, Type
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ Reppo skeleton imports ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from rfdListener import RFDListener
from datasolver   import DataSolver
from ipfsUploader import upload_to_ipfs
from nftAuthorizer import NFTAuthorizer
from submitSolution import SolutionSubmitter

# ‚îÄ‚îÄ‚îÄ Axintera reputation helper (single-file) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# solverNode.py  ‚Äì top of file, just after the other imports
import threading, asyncio, uvicorn, reputation
import score_service                   # <- the FastAPI app you created

# kick off background tasks once at start-up
reputation.init_db()
threading.Thread(target=lambda: asyncio.run(reputation.hourly_recalc()),
                 daemon=True).start()
threading.Thread(target=lambda: uvicorn.run("score_service:app",
                                            host="0.0.0.0", port=8000,
                                            log_level="warning"),
                 daemon=True).start()

# ‚îÄ‚îÄ‚îÄ logging config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
LOGGER = logging.getLogger("SolverNode")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class SolverNode:
    def __init__(
        self,
        test_mode: bool = False,
        mock_mode: bool = False,
        mcp_tools: Optional[List[Type]] = None,
    ):
        """
        Args:
            test_mode: process a local sample RFD, no chain calls
            mock_mode: generate mock data + mock tx hash (dev only)
            mcp_tools: optional list of MCP tool classes to inject
        """
        self.test_mode  = test_mode
        self.mock_mode  = mock_mode
        self.mcp_tools  = mcp_tools

        load_dotenv()

        # wallet address
        self.wallet_address = (
            "0xMockWalletAddress" if self.mock_mode else os.getenv("WALLET_ADDRESS")
        )
        if not self.wallet_address:
            raise ValueError("WALLET_ADDRESS must be set in .env")

        # core solver
        self.solver = DataSolver.from_env(mock_mode=self.mock_mode)

        # supporting components (skip in mock / test)
        if self.mock_mode or self.test_mode:
            self.authorizer = None
            self.submitter  = None
            self.listener   = None
        else:
            self.authorizer = NFTAuthorizer()
            self.submitter  = SolutionSubmitter()
            self.listener   = RFDListener()

        self._print_mode_banner()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _print_mode_banner(self):
        if self.mock_mode:
            mode = "MOCK"
            details = [
                "mock data generation",
                "mock blockchain responses",
                "no external services",
            ]
        elif self.test_mode:
            mode = "TEST"
===== submitSolution.py =====
#!/usr/bin/env python
import os, json, logging
from typing import Optional

from dotenv import load_dotenv
from web3 import Web3
from ipfsUploader import upload_to_ipfs
import reputation                        # ‚Üê new helper

load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("SolutionSubmitter")

PROVIDER_ID = os.getenv("WALLET_ADDRESS", "unknown_provider").lower()
reputation.init_db()

class SolutionSubmitter:
    GAS_LIMIT = 200_000

    def __init__(self) -> None:
        self.rpc       = os.getenv("WEB3_RPC_URL")
        self.addr      = os.getenv("EXCHANGE_CONTRACT_ADDRESS")
        self.abi_path  = os.getenv("EXCHANGE_CONTRACT_ABI_PATH", "./abis/exchange_abi.json")
        self.pk        = os.getenv("PRIVATE_KEY")
        self.chain_id  = int(os.getenv("CHAIN_ID", "1"))

        for k, v in {"WEB3_RPC_URL": self.rpc, "EXCHANGE_CONTRACT_ADDRESS": self.addr,
                     "PRIVATE_KEY": self.pk}.items():
            if not v:
                raise EnvironmentError(f"Missing env var {k}")

        self.w3 = Web3(Web3.HTTPProvider(self.rpc))
        if not self.w3.is_connected():
            raise ConnectionError("RPC not reachable")

        with open(self.abi_path, "r", encoding="utf-8") as f:
            abi = json.load(f)
        self.contract = self.w3.eth.contract(
            address=self.w3.to_checksum_address(self.addr),
            abi=abi,
        )
        self.acct = self.w3.eth.account.from_key(self.pk)

    # ------------------------------------------------------------
    def submit_solution(self, rfd_id: int, file_path: str) -> Optional[str]:
        try:
            cid_uri = upload_to_ipfs(file_path)
            if not cid_uri:
                raise RuntimeError("IPFS upload failed")

            nonce = self.w3.eth.get_transaction_count(self.acct.address)
            tx    = self.contract.functions.submitSolution(rfd_id, cid_uri).build_transaction(
                {"from": self.acct.address, "nonce": nonce, "gas": self.GAS_LIMIT,
                 "gasPrice": self.w3.eth.gas_price, "chainId": self.chain_id}
            )
            signed  = self.w3.eth.account.sign_transaction(tx, self.pk)
            tx_hash = self.w3.eth.send_raw_transaction(signed.rawTransaction)
            log.info("‚úÖ submitSolution tx %s", self.w3.to_hex(tx_hash))

            reputation.update_stats(PROVIDER_ID, True)
            return self.w3.to_hex(tx_hash)

        except Exception as exc:                       # noqa: BLE001
            log.error("‚ùå submitSolution failed: %s", exc)
            reputation.update_stats(PROVIDER_ID, False)
            return None

    def is_connected(self) -> bool:
        return self.w3.is_connected() and self.w3.eth.chain_id == self.chain_id
===== tests/conftest.py =====
import sys, pathlib
ROOT = pathlib.Path(__file__).resolve().parent.parent
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))
===== tests/test_scoring.py =====
from reputation import wilson

def test_wilson_values():
    # empty denominator guard
    assert wilson(0, 0) == 0.0
    # 10/10 at 95 % CI ‚âà 0.722
    assert 0.70 < wilson(10, 10) < 0.75
    # 7/10 comes out ‚âà 0.397
    assert 0.35 < wilson(7, 10) < 0.45
===== tests/test_update_stats.py =====
# tests/test_update_stats.py
"""
Unit-test for Axintera reputation counters.

‚Ä¢ Uses a disposable SQLite file in the OS temp directory
  so it never touches your real state/stats.db.
‚Ä¢ Verifies that `served` increments every call
  and `success` increments only when ok=True.
‚Ä¢ Confirms the score column is created and defaults to 0.0.
"""
import tempfile, os, sqlite3, pathlib

import reputation  # ‚Üê your helper

def setup_function():
    """Run before each test ‚Äì reset to a fresh empty DB."""
    # point DB_PATH at a temporary file
    reputation.DB_PATH = pathlib.Path(tempfile.gettempdir()) / "axintera_test_stats.db"
    if reputation.DB_PATH.exists():
        os.remove(reputation.DB_PATH)
    reputation.init_db()

def test_update_stats_counters():
    pid = "0xTEST"

    # 7 successes
    for _ in range(7):
        reputation.update_stats(pid, True)

    # 3 failures
    for _ in range(3):
        reputation.update_stats(pid, False)

    # inspect row
    with sqlite3.connect(reputation.DB_PATH) as conn:
        served, success, score = conn.execute(
            "SELECT served, success, score FROM providerstat WHERE provider_id=?",
            (pid.lower(),),
        ).fetchone()

    assert (served, success, score) == (10, 7, 0.0)
